# =========================================================
# DP
# - base
# TODO swapで3次元とかに対応できる？
# - Knapsack
# - XXX LCS
# - XXX LIS
# - XXX 桁DP
# - XXX 区間DP
# - XXX bitDP
# - XXX 木DP
# - XXX 全方位木DP
# - XXX ダブリング
# =========================================================

snippet algo_dp_cheat "dpのヒント" b
// - その数を作れるか: 部分和
//   (def) dp_ij := i個目までで、jを作れる場合true
//   (trn) nx = dp, if (dp[j]) nx[j + X] = true;
// - 連続で選ばない: Vacation
// - 区間クエリを貰うDP: zeta, seg
endsnippet

snippet algo_dp "dp" b
// 値の型: ${1:long long}
// 遷移数: ${2:N}
// DP表の初期値: ${3:INF}
// 2次元表の場合、横の長さ: ${4:M} = 番兵+1 sizeも+1
// 最初の値: ${5:0 1} = 通り数なら1, 最小化なら0

// =====================================
// 1次元DP
//         ↱    ↴    ↴
// ...  dp_i  dp_i+1  dp_i+2  ...

//vector<$1> dp($2, $3);
//dp[0] = $5;
//for (int i = 0; i < $2; ++i) {
//	for (int j = 1; j <= K; ++j) {
//		if (i + j < N) {
//			dp[i + j] = min(dp[i + j], dp[i] + cost);
//		}
//	}
//}

// =====================================
vector<$1> def($4, $3); // 2次元DP swap
auto dp = def, nx = dp;
dp[0] = $5;
for (int i = 0; i < $2; ++i, swap(dp, nx)) {
	// - 選ばない: dp    緩和、通り数
	// - 必ず選ぶ: def   初期化する
	nx = dp;
	//nx = def;

	// ...  dp_j                  ...
	//            ↘
	// ...  nx_j  nx_j+X  nx_i+2  ...
	// 横向きループ
	for (int j = 0; j < $4; ++j) {
		nx[j + X] = min(nx[j + X], dp[j] + cost);
		//nx[i + X] += dp[i];
	}

	// ... dp_j  dp_j+1  dp_j+2  ...
	//        ↘       ↘       ↘
	//                          nx_j
	// S := zeta dp
	//for (int j = AA; j <= BB; ++j) {
	//	nx[j] += S[j + 1];
	//}
}

// =====================================
//cout << dp.back() << endl;
//cout << (dp.back() == INF ? -1 : dp.back()) << endl;
//cout << *max_element(dp.begin(), dp.end()) << endl;
//cout << *min_element(dp.begin(), dp.end()) << endl;

// mod sum
//long long ans = 0;
//for (auto &&v : dp) ans += v, ans %= MOD;
//cout << ans << endl;
endsnippet

snippet algo_dp_seg "DP on segment tree" b
// 値の型: ${1:long long}
// 遷移数: ${2:N}
// DP表の初期値: ${3:INF}
// DP表の横の長さ: ${4:L+1} = 番兵+1
// 最初の値: ${5:0 1} = 通り数なら1, 最小化なら0

// セグ木DP
algo_ds_segment_tree_ALL
act(0, $6);
for (int i = 0; i < $2; ++i) {
	$1 tmp = prod(l, r + 1);
	act(X, tmp); // 更新か緩和
}
//cout << seg[L + sz] << endl;
//cout << seg[1] << endl;
endsnippet




# TODO 遷移式メインに修正中

snippet algo_dp_knapsack_alt "dp knapsack alt" b
// TODO これ理解したら汎用化したいね
int ${1:V} = ${2:1e5};
vector<vector<${3:int}>> dp(${4:N} + 1, vector<$3>($1 + 1, inf<$3>));
dp[0][0] = 0;
for (int i = 0; i < $4; ++i) {
	for (int j = 0; j <= $1; ++j) {
		dp[i + 1][j] = min(dp[i + 1][j], dp[i][j]);
		if (v[i] <= j) {
			dp[i + 1][j] = min(dp[i + 1][j], dp[i][j - ${5:v}[i]] + ${6:w}[i]);
		}
	}
}
$3 ans = 0;
for (int i = 0; i <= $1; ++i) {
	if (dp[$4][i] <= ${7:W}) {
		ans = max(ans, i);
	}
}
cout << ans << endl;
endsnippet

snippet algo_dp_lcs "dp lcs" b
// WIP これは長さだけ。本体を求めるものもある
// LCS
int ${3:s} = ${1:S}.size(), ${4:t} = ${2:T}.size();
vector<vector<int>> dp($3 + 1, vector<int>($4 + 1, 0));
for (int i = 0; i < $3; ++i) {
	for (int j = 0; j < $4; ++j) {
		dp[i + 1][j + 1] = max(
			{dp[i][j + 1], dp[i + 1][j], dp[i][j] + ($1[i] == $2[j])});
	}
}
cout << dp[$3][$4] << endl;
endsnippet
snippet algo_dp_lis "dp lis" b
// WIP
// LIS
endsnippet
snippet algo_dp_order "dp order" b
// WIP
// 桁DP
endsnippet
snippet algo_dp_range "dp range" b
// WIP
// 区間DP
endsnippet
snippet algo_dp_bit "dp bit" b
// WIP
// bit集合DP
endsnippet
snippet algo_dp_tree "dp tree" b
// TODO
// 頂点vの部分木を対象とした木DP
vector<${1:long long}> dp(${2:N}, ${3:0});
auto dfs = [&](auto &f, int v, int par = -1) -> void {
	if (${4:tree}[v].size() == 1) {
		dp[v] = 0;
		return;
	}
	$1 tmp = 0;
	for (auto &&[from, to, cost, id] : $4[v]) {
		if (to == par) continue;
		f(f, to, from);
		tmp = ${5:max}(tmp, dp[to] + cost);
	}
	dp[v] = tmp;
};
dfs(dfs, N);
cout << dp[N - 1] << endl;
endsnippet
snippet algo_dp_rerooting "dp rerooting" b
// WIP
// 全方位木DP
endsnippet
snippet algo_dp_doubling "doubling" b
// ダブリング
long long log = 1;
while ((1ll << log) <= K) log++;
// =========================
// dp[i][j] := 2^i 回で行くところ、j種類
vector<vector<long long>> dp(log, vector<long long>(${1:N}));
for (int i = 0; i < N; ++i) {
	dp[0][i] = ${2:A}[i];
}
// =========================
// 前計算 ~2回次への遷移~
//   j dp0  dp1  dp2  ...  dp_last
// i
// 0             dp[i][j] 1個次があるので
// 1       dp[i][j] ↲  ここに行きたい
// ...
// ◽️1回次(普通のDP)の遷移は
//       次行[j] = 今行[j]
//    dp[i + 1][j] = dp[i][j]
// dp[i][j] は2^iで行った時の何種類目か、なので
// ◽️2回次は
//     2回次[j] = 今行[ 1回次のj ]
//   dp[i + 1][j] = dp[i][ dp[i][j] ]
// =========================
for (int i = 0; i < log - 1; ++i) {
	for (int j = 0; j < N; j++) {
		// 漸化式
		// choose
		dp[i + 1][j] = dp[i][dp[i][j]];
		// dp[i + 1][j] = dp[i][j] + dp[i][(j + dp[i][j]) % N];
	}
}
// =========================
// クエリ
long long ans = 0;
for (int i = 0; K > 0; ++i) {
	// choose
	if (K & 1) ans = dp[i][ans];
	// if (K & 1) ans += dp[i][ans % N];
	K >>= 1;
}
cout << ans << endl;
endsnippet

