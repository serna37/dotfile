# =========================================================
# DP
# - base
# TODO swapで3次元とかに対応できる？
# - Knapsack
# - XXX LCS
# - XXX LIS
# - XXX 桁DP
# - XXX 区間DP
# - XXX bitDP
# - XXX 木DP
# - XXX 全方位木DP
# - XXX ダブリング
# =========================================================

snippet algo_dp_def_1 "dp def 1" b
// =====================================
// Frog DP 1次元DPテーブルを配る/貰う
//   -----------
//  /     ↘︎     ↘︎
// | |   | |   | | ...
// from   to    to
vector<${1:int}> dp(${2:N}, ${3:INF});
dp[${4:0}] = ${5:0};
algo_dp_for
endsnippet
snippet algo_dp_def_swap "dp def swap" b
// =====================================
// ナップサック 2次元DP 前行と次行で遷移
// dp | |         | |
//        ↘︎+cost   ↓
// nx | |         | |
vector<${1:int}> def(${2:M} + 1, ${3:INF});
auto dp = def, nx = dp;
dp[${4:0}] = ${5:0};
algo_dp_for_swap
endsnippet
snippet algo_dp_def_2 "dp def 2" b
// =====================================
// 2次元DP表
// | |         | |
//     ↘︎+cost   ↓
// | |         | |
vector<vector<${1:int}>> ${2:dp}(${3:N}, vector<$1>(${4:M}, ${5:0}));
dp[${6:0}][${7:0}] = ${8:0};
algo_dp_for
endsnippet
snippet algo_dp_for "dp for" b
// =========================
for (int ${1:i} = ${2:0}; $1 <${3:N}; ++$1) {
	// 区間の最小/最大を貰う -> セグ木DPで1次元の遷移
	// 区間の和を使う -> 累積和

	// 2次元用の漸化式
	algo_dp_add
	algo_dp_chdp

}
endsnippet
snippet algo_dp_for_swap "dp for swap" b
// =========================
for (int i = 0; i < ${1:N}; ++i, swap(dp, nx)) {
	// - 選ばない: dp    緩和、通り数
	// - 必ず選ぶ: def   初期化する
	nx = ${2:dp def};
	// 漸化式
	algo_dp_add_swap
	algo_dp_chdp_swap
}
// 最終行はdp
endsnippet

# [遷移式] 通り数系
snippet algo_dp_add "dp add" b
// =========================
// dp_i_j  dp_i_j+1
//        ↘︎  ↓       加算
//        dp_i+1_j+1
dp[i+1][j+1] = dp[i][j] + dp[i][j+1];
endsnippet

# [遷移式] 緩和
snippet algo_dp_chdp "chdp knapsack" b
// =========================
// dp_i_j    dp_i+1_j+1
//   + cost ↘︎  ↓
//           dp_i_j+1
dp[i+1][${3:j+1}] = ${1:min}(dp[i+1][$3], dp[i][${2:j}] + ${4:cost});
endsnippet

# [遷移式] 通り数系 swap用
snippet algo_dp_add_swap "dp add" b
// =========================
// dp_j  dp_j+1
//     ↘︎  ↓    加算
// nx_j  nx_j+1
nx[${1:j + 1}] += dp[${2:j}];
endsnippet

# [遷移式] 緩和 swap用
snippet algo_dp_chdp_swap "chdp knapsack" b
// =========================
// dp_from    dp_to (nx=dpで緩和済み)
//   + cost ↘︎  ↓
//           nx_to
nx[${3:to}] = ${1:min}(nx[$3], dp[${2:from}] + ${4:cost});
endsnippet


# TODO 遷移式メインに修正中

snippet algo_dp_knapsack_alt "dp knapsack alt" b
// TODO これ理解したら汎用化したいね
int ${1:V} = ${2:1e5};
vector<vector<${3:int}>> dp(${4:N} + 1, vector<$3>($1 + 1, inf<$3>));
dp[0][0] = 0;
for (int i = 0; i < $4; ++i) {
	for (int j = 0; j <= $1; ++j) {
		dp[i + 1][j] = min(dp[i + 1][j], dp[i][j]);
		if (v[i] <= j) {
			dp[i + 1][j] = min(dp[i + 1][j], dp[i][j - ${5:v}[i]] + ${6:w}[i]);
		}
	}
}
$3 ans = 0;
for (int i = 0; i <= $1; ++i) {
	if (dp[$4][i] <= ${7:W}) {
		ans = max(ans, i);
	}
}
cout << ans << endl;
endsnippet

snippet algo_dp_lcs "dp lcs" b
// WIP これは長さだけ。本体を求めるものもある
// LCS
int ${3:s} = ${1:S}.size(), ${4:t} = ${2:T}.size();
vector<vector<int>> dp($3 + 1, vector<int>($4 + 1, 0));
for (int i = 0; i < $3; ++i) {
	for (int j = 0; j < $4; ++j) {
		dp[i + 1][j + 1] = max(
			{dp[i][j + 1], dp[i + 1][j], dp[i][j] + ($1[i] == $2[j])});
	}
}
cout << dp[$3][$4] << endl;
endsnippet
snippet algo_dp_lis "dp lis" b
// WIP
// LIS
endsnippet
snippet algo_dp_order "dp order" b
// WIP
// 桁DP
endsnippet
snippet algo_dp_range "dp range" b
// WIP
// 区間DP
endsnippet
snippet algo_dp_bit "dp bit" b
// WIP
// bit集合DP
endsnippet
snippet algo_dp_tree "dp tree" b
// TODO
// 頂点vの部分木を対象とした木DP
vector<${1:long long}> dp(${2:N}, ${3:0});
auto dfs = [&](auto &f, int v, int par = -1) -> void {
	if (${4:tree}[v].size() == 1) {
		dp[v] = 0;
		return;
	}
	$1 tmp = 0;
	for (auto &&[from, to, cost, id] : $4[v]) {
		if (to == par) continue;
		f(f, to, from);
		tmp = ${5:max}(tmp, dp[to] + cost);
	}
	dp[v] = tmp;
};
dfs(dfs, N);
cout << dp[N - 1] << endl;
endsnippet
snippet algo_dp_rerooting "dp rerooting" b
// WIP
// 全方位木DP
endsnippet
snippet algo_dp_doubling "doubling" b
// ダブリング
long long log = 1;
while ((1ll << log) <= K) log++;
// =========================
// dp[i][j] := 2^i 回で行くところ、j種類
vector<vector<long long>> dp(log, vector<long long>(${1:N}));
for (int i = 0; i < N; ++i) {
	dp[0][i] = ${2:A}[i];
}
// =========================
// 前計算 ~2回次への遷移~
//   j dp0  dp1  dp2  ...  dp_last
// i
// 0             dp[i][j] 1個次があるので
// 1       dp[i][j] ↲  ここに行きたい
// ...
// ◽️1回次(普通のDP)の遷移は
//       次行[j] = 今行[j]
//    dp[i + 1][j] = dp[i][j]
// dp[i][j] は2^iで行った時の何種類目か、なので
// ◽️2回次は
//     2回次[j] = 今行[ 1回次のj ]
//   dp[i + 1][j] = dp[i][ dp[i][j] ]
// =========================
for (int i = 0; i < log - 1; ++i) {
	for (int j = 0; j < N; j++) {
		// 漸化式
		// choose
		dp[i + 1][j] = dp[i][dp[i][j]];
		// dp[i + 1][j] = dp[i][j] + dp[i][(j + dp[i][j]) % N];
	}
}
// =========================
// クエリ
long long ans = 0;
for (int i = 0; K > 0; ++i) {
	// choose
	if (K & 1) ans = dp[i][ans];
	// if (K & 1) ans += dp[i][ans % N];
	K >>= 1;
}
cout << ans << endl;
endsnippet

