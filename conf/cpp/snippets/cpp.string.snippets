# =========================================================
# string
# - 大文字小文字変換
# - 大文字小文字判定(wrapper)
# - 左右0埋め
# - 文字列検索(複数)
# - split
# - ランレングス圧縮
# - XXX Z-Algorithm
# =========================================================
snippet string_transform "transform case" b
// 大文字小文字を変換
std::transform(${1:str}.begin(), $1.end(), $1.begin(), ::${2:tolower});
endsnippet
snippet string_islower "string islower" b
// bool値を返すようwrap
auto islow = [](char c) -> bool { return islower(c) != 0; };
endsnippet
snippet string_isupper "string isupper" b
// bool値を返すようwrap
auto isupp = [](char c) -> bool { return isupper(c) != 0; };
endsnippet
snippet string_lpad "string lpad" b
auto lpad = [](const string &S, int size, char ch = '0') -> string {
	int N = S.size();
	if (N >= size) return S;
	return string(size - N, ch) + S;
};
endsnippet
snippet string_rpad "string rpad" b
auto rpad = [](const string &S, int size, char ch = '0') -> string {
	int N = S.size();
	if (N >= size) return S;
	return S + string(size - N, ch);
};
endsnippet
snippet string_finds "string finds" b
auto finds = [](const string &T, const string &S) -> vector<int> {
	vector<int> pos;
	auto p = T.find(S);
	while (p != string::npos) {
		pos.emplace_back(p);
		p = T.find(S, p + 1);
	}
	return pos;
};
endsnippet
snippet string_split "string split" b
// 区切り文字がない場合空文字
auto split = [](const string &S, const char &sep) -> vector<string> {
	vector<string> res = {""};
	for (auto &&v : S) {
		if (v == sep) {
			res.emplace_back("");
		} else {
			res.back() += v;
		}
	}
	return res;
};
endsnippet
snippet string_split_multi "string split multi" b
// 複数のcharで区切る 区切り文字がない場合空文字
auto split = [](const string &S, const string &seps) -> vector<string> {
	vector<string> res = {""};
	for (auto &&v : S) {
		if (count(seps.begin(), seps.end(), v)) {
			res.emplace_back("");
		} else {
			res.back() += v;
		}
	}
	return res;
};
endsnippet
snippet string_run_length "string run length" b
auto run_length = [](const string &S) -> vector<pair<char, int>> {
	vector<pair<char, int>> res;
	for (auto &&x : S) {
		if (res.empty() or res.back().first != x) {
			res.emplace_back(x, 0);
		}
		++res.back().second;
	}
	return res;
};
endsnippet
snippet string_z_algo "string z algorithm" b
auto z_algo = [](const string &S) -> vector<int> {
	int n = S.size();
	if (n == 0) return {};
	vector<int> z(n);
	z[0] = 0;
	for (int i = 1, j = 0; i < n; ++i) {
		int &k = z[i];
		k = (j + z[j] <= i) ? 0 : min(j + z[j] - i, z[i - j]);
		while (i + k < n and S[k] == S[i + k]) ++k;
		if (j + z[j] < i + z[i]) j = i;
	}
	z[0] = n;
	return z;
};
endsnippet

