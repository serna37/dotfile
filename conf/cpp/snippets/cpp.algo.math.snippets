# =========================================================
# Math
# - mod
# - 素数
# - その他
# =========================================================

# mod
snippet algo_math_mod_pow "二分累乗" b
// =====================================
/* 二分累乗 */
auto modpow = [&](long long a, long long n) -> long long {
	long long res = 1ll;
	while (n > 0) {
		if (n & 1) res = res * a % MOD;
		a = a * a % MOD;
		n >>= 1ll;
	}
	return res;
};
endsnippet
snippet algo_math_mod_inv "Fermatの小定理" b
// =====================================
/* Fermatの小定理 */
auto modinv = [&](long long a) -> long long {
	return modpow(a, MOD - 2);
};
endsnippet
snippet algo_math_mod_factorial "階乗" b
// =====================================
/* mod階乗 */
vector<long long> mf;
auto modfact = [&](int x) -> long long {
	if ((int)mf.size() > x) return mf[x];
	if (mf.empty()) mf.push_back(1);
	for (int i = mf.size(); i <= x; ++i) mf.push_back(mf.back() * i % MOD);
	return mf[x];
};
endsnippet
snippet algo_math_mod_combination "mod combination" b
// =====================================
algo_math_mod_pow
algo_math_mod_inv
algo_math_mod_factorial
/* mod組合せ */
auto mod_combination = [&](int n, int k) -> long long {
	return modfact(n) * modinv(modfact(k)) % MOD * modinv(modfact(n - k)) % MOD;
};
endsnippet

# 素数
snippet algo_math_prime_fact "素因数分解" b
// =====================================
/* 素因数分解 */
auto prime_fact = []<class T>(T N) -> map<T, int> {
	map<T, int> P;
	for (T i = 2; i * i <= N; ++i) {
		while (N % i == 0) {
			++P[i];
			N /= i;
		}
	}
	if (N > 1) ++P[N];
	return P;
};
endsnippet
snippet algo_math_prime_test "素数判定" b
// =====================================
/* 素数判定 */
auto prime_test = []<class T>(T N) -> bool {
	if (N == 2) return true;
	if (N == 1 or N % 2 == 0) return false;
	for (T i = 3; i * i <= N; i += 2) {
		if (N % i == 0) return false;
	}
	return true;
};
endsnippet

# その他
snippet algo_math_divisors "約数列挙" b
// =====================================
/* 約数列挙 */
auto divisors = []<class T>(T a) -> vector<T> {
	vector<T> res;
	for (T i = 1; i * i <= a; ++i) {
		if (a % i != 0) continue;
		res.push_back(i);
		if (a / i != i) res.push_back(a / i);
	}
	return res;
};
endsnippet
snippet algo_math_digit_sum "桁和" b
// =====================================
/* 桁和 */
auto digit_sum = [](int a, int N = 10) -> int {
	int res = 0;
	while (a != 0) {
		res += a % N;
		a /= N;
	}
	return res;
};
endsnippet
snippet algo_math_base_convert "進数変換" b
// =====================================
/* 進数変換 */
// fromとtoは10を超えないこと
auto base_cvt = [](string a, int from, int to) -> string {
	// 10進数に直す
	long long cvt = 0ll;
	for (auto &&v : a) {
		cvt = cvt * from + (int)(v - '0');
	}
	if (cvt == 0) return "0";
	// to進数に直す
	string res = "";
	while (cvt) {
		// 10進数で表せる範囲の文字しか扱っていない
		res = (char)(cvt % to + '0') + res;
		cvt /= to;
	}
	return res;
};
endsnippet
snippet algo_math_combination "コンビネーション" b
// =====================================
/* コンビネーション */
auto combination = [](int n, int k) -> long long {
	if (k < 0 || n < k) return 0ll;
	long long res = 1;
	for (int i = 1; i <= k; ++i) {
		res *= n--;
		res /= i;
	}
	return res;
};
endsnippet
snippet algo_math_factorial "階乗" b
// =====================================
/* 階乗 */
auto factorial = [](int N) -> long long {
	long long res = 1;
	while (N > 0) res *= N--;
	return res;
};
endsnippet
snippet algo_math_square_free "平方因子除去" b
// =====================================
/* 平方因子除去 */
auto square_free = [](int mx = 2e5) -> vector<int> {
	vector<int> S(mx + 1);
	for (int i = 1; i <= mx; ++i) S[i] = i;
	for (int i = 2; i * i <= mx; ++i) {            // 全平方数
		for (int j = i * i; j <= mx; j += i * i) { // の倍数で割りきる
			while (S[j] % (i * i) == 0) S[j] /= i * i;
		}
	}
	return S;
};
endsnippet

