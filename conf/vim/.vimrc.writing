" =====================================================================
" 高速編集のための追加設定
" =====================================================================

" 依存スニペット展開用。トリガ文言を展開する
fu! s:expandSnippet() abort
    cal feedkeys("A\<C-s>\<Esc>", 'x')
    exe "DebugOnSaveAtCoderCppEnd"
    w
    exe "DebugOnSaveAtCoderCpp"
endf
noremap <silent><Plug>(exp-snip) :<C-u>cal <SID>expandSnippet()<CR>
nnoremap <silent><Leader>t <Plug>(exp-snip)

" 一番下行から書く時に、フォーマットして画面真ん中フォーカス
fu! s:asyncFormat() abort
    try | cal CocAction('format') | catch | endtry
endf
noremap <silent><Plug>(async-fmt) :<C-u>cal <SID>asyncFormat()<CR>
nnoremap O zz<Plug>(async-fmt)O

" 行のどこにいても、行末に{を入力、行末に移動
inoremap {{ <Esc>A{}<Left>

" 行のどこにいても、行末にセミコロンを、なければ入れる
fu! s:tailsemi() abort
    if getline('.')[-1:] != ';'
        execute('normal A;')
    endif
endf
noremap <silent><Plug>(tailsemi) :<C-u>cal <SID>tailsemi()<CR>
inoremap ;; <Esc><Plug>(tailsemi)
inoremap ;<CR> <Esc><Plug>(tailsemi)o

" main関数の上に移動しlibやconstなど書くための移動
nnoremap <silent><Leader>H 0<Plug>(edgemotion-k)O

" コメント設計のための補助
let s:cmt_design_step = 1
fu! s:comment_design() abort
    let txt = input('step'.s:cmt_design_step.'>')
    cal append(line('.')-1, '// '.s:cmt_design_step.'. '.txt)
    let s:cmt_design_step += 1
endf
fu! s:comment_design_reset() abort
    let s:cmt_design_step = 1
endf
"nnoremap <silent><C-c> :cal <SID>comment_design_reset()<CR>:echom '[INFO] comment sequence reset'<CR>
"nnoremap <silent><Leader>j :cal <SID>comment_design()<CR>

