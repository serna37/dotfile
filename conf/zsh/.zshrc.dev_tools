function dev_tools_logo_python() {
    printf "\e[33m\n"
    echo "               ........            "
    echo "            (MMMMMMMMMMMNJ         "
    echo "           ,MF  MMMMMMMMMM]        "
    echo "           ,MMNMMMMMMMMMMM]        "
    echo "       ............MMMMMMM].....   "
    echo "     JMMMMMMMMMMMMMMMMMMMM].==?=i. "
    echo "    dMMMMMMMMMMMMMMMMMMMMM].?==??1 "
    echo "   .MMMMMMMMMMMMMMMMMMMMMF ?=?===?_"
    echo "   -MMMMMMMMB'7<<<<<<<<~.(?==??=?={"
    echo "   ,MMMMMMM!.??=?=??=?????==?==?=?:"
    echo "    MMMMMMF.==?=?=?=?==?==?=?=?=?v "
    echo "    .WMMMMF.?==?=?==?=?==?=?=?==<  "
    echo "      .7""=.=?=?==?________  _     "
    echo "           .??==??=?=?=1?=:        "
    echo "           .?=?=?==?=?  .?:        "
    echo "            ~1?==?==??1+??         "
    echo "                _!!!!~             "
    printf "\e[m"
}

function dev_tools_python_localhost() {
    _lazy_install gum
    dev_tools_logo_python
    printf "\e[32m\n"
    echo "  _                       _  _                             _____    ______   ______   ______ ";
    echo " | |                     | || |                  _        / ___ \  / __   | / __   | / __   | ";
    echo " | |  ___    ____   ____ | || | _    ___    ___ | |_   _ ( (   ) )| | //| || | //| || | //| | ";
    echo " | | / _ \  / ___) / _  || || || \  / _ \  /___)|  _) (_) > > < < | |// | || |// | || |// | | ";
    echo " | || |_| |( (___ ( ( | || || | | || |_| ||___ || |__  _ ( (___) )|  /__| ||  /__| ||  /__| | ";
    echo " |_| \___/  \____) \_||_||_||_| |_| \___/ (___/  \___)(_) \_____/  \_____/  \_____/  \_____/ ";
    printf "\e[m"
    info 'input port'
    python -m http.server $(gum input --header='port' --value='8000')
}

function dev_tools_python_venv() {
    dev_tools_logo_python
    printf "\e[32m\n"
    echo "  _   _   ____  ____   _   _ ";
    echo " | | | | / _  )|  _ \ | | | | ";
    echo "  \ V / ( (/ / | | | | \ V / ";
    echo "   \_/   \____)|_| |_|  \_/ ";
    printf "\e[m"
    # vimspector debug設定を追加
    cp -f ~/git/dotfiles/conf/vim/.vimspector.json .
    spin 'Python venv activation' python -m venv venv
    . venv/bin/activate
}

function dev_tools_logo_cpp() {
    printf "\e[34m\n"
    echo "            .(XyyS&,             "
    echo "         .JyZZZZyZyyyn..         "
    echo "     ..dyyZZyyyZZyZZyZyyk-.      "
    echo "   .yyyZyZ0=!      _7XZZyyyW,    "
    echo "   dZZZyZ=            ?yQgMH#    "
    echo "   dyZyZ'    .dyyk.  .&HHHHH#    "
    echo "   dZyyr    dyZyyXQMHH@4HHYM#    "
    echo "   dZZy[   .yyQNMMHHHh,..&..K    "
    echo "   dyZZn    ?MNNNNMDTMHHHHHH#    "
    echo '   dyyZQa     ?""^     WMHHH#    '
    echo "   zQNNNMN,          .MNMNMM#    "
    echo '    THNMNNNMN&....(MNNNNMM#"     '
    echo "       ?YMNNNNMNNNNNNMMY=        "
    echo '          .TMNNNMNMM"            '
    echo '              7"""`              '
    printf "\e[m"
}

function dev_tools_cpp_setup() {
    dev_tools_logo_cpp
    printf "\e[32m\n"
    echo "               _ ";
    echo "   ___   ____ | |_   _   _  ____ ";
    echo "  /___) / _  )|  _) | | | ||  _ \ ";
    echo " |___ |( (/ / | |__ | |_| || | | | ";
    echo " (___/  \____) \___) \____|| ||_/ ";
    echo "                           |_| ";
    printf "\e[m"
    # gitignore
    cp -f ~/git/dotfiles/conf/cpp/cpp_gitignore .gitignore
    # LSP server用設定
    cp -f ~/git/dotfiles/conf/cpp/.clang-format .
    cp -f ~/git/dotfiles/conf/cpp/compile_flags.txt .
    # vimspector debug設定を追加
    cp -f ~/git/dotfiles/conf/vim/.vimspector.json .
    # C++ロゴフォーマッタとAAを追加
    cp -fR ~/git/dotfiles/conf/cpp/AA .
}

function dev_tools_logo_atcoder() {
    echo '                                            .'
    echo '                                          .dN.'
    echo '                                       ..d@M#J#(,'
    echo '                                    vRMPMJNd#dbMG#(F'
    echo '                          (O.  U6..  WJNdPMJFMdFdb#`  .JU` .Zo'
    echo '                       .. +NM=(TB5.-^.BMDNdJbEddMd ,n.?T@3?MNm  ..'
    echo '                      .mg@_J~/?`.a-XNxvMMW9""TWMMF.NHa._ ?_,S.Tmg|'
    echo '                   .Js ,3,`..-XNHMT"= ...d"5Y"X+.. ?"8MNHHa.. (,b uZ..'
    echo '                  J"17"((dNMMB"^ ..JTYGJ7"^  ?"T&JT9QJ..?"TMNNHa,?727N'
    echo '                  .7    T"^..JT"GJv"=`             ?"4JJT9a.,?T"`  .7!'
    echo '                          M~JY"!     ....<.Zj+,(...     .7Ta_M'
    echo '              .JWkkWa,    d-F     .+;.ge.ga&.aa,ua+.g,     ,}#    .(Wkkkn,'
    echo '             .W9AaeVY=-.. J;b   .XH3dHHtdHHDJHHH(HHH(WH,   J(F  ..?T4agdTH-'
    echo '              6XkkkH=!    ,]d  .HHtdHHH.HHHbJHHH[WHHH(HHL  k.]    _7HkkkHJ:'
    echo '              JqkP?H_      N(; TYY?YYY9(YYYD?YYYt7YYY\YY9 .Fd!     .WPjqqh'
    echo '              .mmmH,``      d/b WHHJHH@NJHHH@dHHHFdHHHtHH#`.1#       `(dqqq]'
    echo '             ,gmmgghJQQVb  ,bq.,YY%7YYY(YYY$?YYY^TYYY(YY^ K.]  JUQmAJmmmmg%'
    echo '              ggggggggh,R   H,]  T#mTNNbWNN#dNN#(NN@(N@! .t#   d(Jgggggggg:'
    echo '             .@@@@@#"_JK4,  ,bX.   ?i,1g,jge.g2+g2i,?`   K.t  .ZW&,7W@@@@@h.'
    echo '         `..H@@@@@P   7 .H`  W/b        .^."?^(!        -1#   W, ?   T@@@@@Ma,`'
    echo '         dH@HHHM"       U\   .N,L        ..            .$d    .B`     ."MHHH@HN.'
    echo '    ....JMHHHHH@              ,N(p      .dH.d"77h.    .$J\              dHHHHHMU....'
    echo '   ` WHH#,7MHHM{               ,N,h     d^.W,        .^J^               .MHHM"_d#HN.'
    echo '    ,jH#Mo .MMW:                .W,4,  J\   Ta.-Y` .J(#                 .HMM- .M#MF!'
    echo '      .MN/ d@?M+                  7e(h.           .3.F                  .MDd# (MML`'
    echo '      .M4%  ?H, 7a,                .S,7a.       .Y.#^                .,"`.d=  ,PWe'
    echo '     .! ?     dN .N,                 (N,7a.   .Y(d=                 .d! d@     4 .!'
    echo '              .W` .!                   ?H,?GJ".d"                    ^  B'
    echo '                                         (SJ.#='
    echo '                        J             ....            .M:'
    echo '                       JUb     .   .#    (\            M~'
    echo '                      .\.M;  .W@"` M}       .y7"m. .J"7M~ .v74e ,M7B'
    echo '                     .F  ,N.  J]   M]       M)  JF M_  M~ d-     M`'
    echo '                    .W,  .db, Jh.   Th...J\ /N..Y` ?N-.Ma.-M&.> .M-'
    echo ""
    echo ""
}

function dev_tools_cpp_setup_atcoder() {
    dev_tools_cpp_setup
    dev_tools_python_venv
    dev_tools_logo_atcoder
    spin 'pip install --upgrade pip' pip install --upgrade pip
    spin 'pip install --upgrade setuptools' pip install --upgrade setuptools
    spin 'pip install online-judge-tools' pip install online-judge-tools
}

function solve() {
    _lazy_install_llvm
    # 書き捨てで解く
    SAND_DIR="$HOME/work/sandbox"
    if [ $# -eq 0 ]; then
        mkdir -p $SAND_DIR > /dev/null 2>&1
        cd $SAND_DIR
        dev_tools_cpp_setup_atcoder
        mkdir a > /dev/null 2>&1
        mkdir z > /dev/null 2>&1
        touch a/main.cpp z/main.cpp
        #\rm -rf a/test z/test
        v z/main.cpp
        return
    fi

    # AtCoder コンテスト
    CONTEST_CODE=$1
    if [ "$(acc contest $CONTEST_CODE)" = "" ]; then
        error 'contest code is not found.'
        return
    fi
    AC_DIR="$HOME/git/contest"
    mkdir -p $AC_DIR > /dev/null 2>&1
    cd $AC_DIR
    dev_tools_cpp_setup_atcoder
    # atcoder-cliとojのセットアップ
    if ! type acc > /dev/null 2>&1; then
        npm install -g atcoder-cli
    fi
    acc check-oj
    oj login https://atcoder.jp
    acc login
    acc config default-task-choice all
    acc config default-test-dirname-format test
    acc new $CONTEST_CODE
    cd $CONTEST_CODE
    # main.cppを作成
    dirs=(`find . -type d -maxdepth 1 | grep / | cut -d '/' -f 2`)
    for v in ${dirs[@]}; do
        info "touch file :\e[32m$v/main.cpp"
        touch "$v/main.cpp"
    done
    v
}
function _solve() { _values '' '[ 書き捨て]' 'abc[ AtCoderコンテスト番号]' }
compdef _solve solve


# C++ビルドコマンド
# AtCoderでの指定: https://atcoder.jp/contests/APG4b/rules?lang=ja
# -std=c++20 バージョン指定
# -I includeパス
# -Wall 警告オプションまとめ
# -Wextra その他の警告オプションまとめ
# -mtune=native マシン最適化
# -march=native マシン最適化
# -fconstexpr-depth=2147483647 コンパイル時の再帰回数
export CPP_BUILD_CMD="g++ -D=LOCAL -std=c++20 \
-I $HOME/git/dotfiles/conf/cpp \
-Wall \
-Wextra \
-mtune=native \
-march=native \
-fconstexpr-depth=2147483647 \
-o "

# -ftrapv 符号あり整数計算でover under flow
# -fsanitize-undefined-trap-on-error 未定義サニタイザ
# -fsanitize=address アドレスサニタイザ
export CPP_BUILD_CMD_SANITIZE="g++ -D=LOCAL -std=c++20 \
-I $HOME/git/dotfiles/conf/cpp \
-Wall \
-Wextra \
-mtune=native \
-march=native \
-fconstexpr-depth=2147483647 \
-ftrapv \
-fsanitize-undefined-trap-on-error \
-fsanitize=address \
-o "

function cpp_exe() {
    _lazy_install gum
    _lazy_install_llvm
    TARGET=$(find . -name '*.cpp' | gum choose)
    RUN_MODE=$(gum choose "normal" "sanitize")
    CMD=$CPP_BUILD_CMD
    if [ $RUN_MODE = "sanitize" ]; then
        CMD=$CPP_BUILD_CMD_SANITIZE
    fi
    echo "==================================="
    info "build :$TARGET processing..."
    eval "$CMD _cpp_exe $TARGET 2>&1"
    info "build :$TARGET complete."
    echo "==================================="
    printf "\e[33m-----------------------------\e[m\n"
    ./_cpp_exe
    res=$?
    printf "\e[33m-----------------------------\e[m\n"
    if [ $res -eq 0 ]; then
        info "exit code:$res"
    else
        error "exit code:$res."
    fi
}

# より高速なC++実行
# z/main.cppをojでテストする場合はdebug
# a/main.cppをojでテストする場合はdebug a
function debug() {
    TARGET=z
    if [ $# -eq 1 ]; then
        TARGET=$1
    fi
    cd $TARGET
    info "build: $TARGET"
    eval $CPP_BUILD_CMD main main.cpp
    info "exe stdin: test/sample-1.in"
    ./main < test/sample-1.in
    info "answer: test/sample-1.out"
    cat test/sample-1.out
    #oj t -c ./main
    \rm main
    cd ..
}

