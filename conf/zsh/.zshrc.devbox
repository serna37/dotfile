# XXX こいつは基本的にいらない お遊びで作った

# ========================================================
# ========================================================
# ||          Dev Container for SandBox                 ||
# ========================================================
# ========================================================

# 開発用のsandboxコンテナを起動する
# 現在フォルダで、なければdevbox-XXXフォルダを作成し
# dotfile/conf/devboxの設定の最新を反映して、コンテナ起動する
devbox() {
    if [ "$(uname)" = "Linux" ]; then
        warn "Already in Dev Container Box"
        return
    fi
    printf "\e[36m\n"
    echo ""
    echo "                       .."
    echo "                      (NNNN!"
    echo "                      (NMNM_"
    echo "           (J..J-..JJ,.JJ..."
    echo "           -NNMM<MNNMF(NNNN_        .gx-"
    echo "           (MMMM!MMMM5(MMMM!        dNNNx         "
    echo "      MMNM@-MNNM<MNMNF(MNNN_NNNMF  .MNNNN&(-. . "
    echo "      MNNN@(NMNN:MNNNF(NNMN<MNNNF  .NNMNNNNNNNN;  "
    echo "    .-???<!.?<<? <<??:(??<< ??<<!.-.(NNMNNNNNM9."
    echo "  .NNMNNMNMNNMNNNNNNMNNNNNNNNNMNNNNMNNMNMMH =_    "
    echo "  ,NMNMNNMNMNNMNMNMNNNNMNNMNNNNNMNNMNNN@  .     "
    echo "  ,NNNNMNNNNNMNNNMNNMNNMNMNNMMNNMNNMNN@ .         "
    echo "   qMNMNMNMNNMNMNNMNNMNNNNNNMNNMNNMNMD.           "
    echo "    WNNMNNMNNNMNNNMNNNMNMMNNNNMNNMN#!"
    echo "     TNNMNNMNMNNMNNMNNNMNNMNMNNNM@!"
    echo "      .TNMNNMNNMNNMNMNNNNNNMNMY="
    echo "         ? MMNMNNMNNNMMMMW = "
    echo "                 ~~  "
    echo ""
    printf "\e[m"
    printf "\e[32m\n"
    echo "      _                                                    _ ";
    echo "     | |                                      _           (_) ";
    echo "   _ | |  ____  _   _     ____   ___   ____  | |_    ____  _  ____    ____   ____ ";
    echo "  / || | / _  )| | | |   / ___) / _ \ |  _ \ |  _)  / _  || ||  _ \  / _  ) / ___) ";
    echo " ( (_| |( (/ /  \ V /   ( (___ | |_| || | | || |__ ( ( | || || | | |( (/ / | | ";
    echo "  \____| \____)  \_/     \____) \___/ |_| |_| \___) \_||_||_||_| |_| \____)|_| ";
    echo "   ___                                          _  _ ";
    echo "  / __)                                        | || | ";
    echo " | |__   ___    ____     ___   ____  ____    _ | || | _    ___   _   _ ";
    echo " |  __) / _ \  / ___)   /___) / _  ||  _ \  / || || || \  / _ \ ( \ / ) ";
    echo " | |   | |_| || |      |___ |( ( | || | | |( (_| || |_) )| |_| | ) X ( ";
    echo " |_|    \___/ |_|      (___/  \_||_||_| |_| \____||____/  \___/ (_/ \_) ";
    printf "\e[m"

    # エンジンが動いてないなら起動
    APP_LIST=$(osascript -e 'tell application "System Events" to get name of (processes where background only is false)')
    if [[ ! $APP_LIST =~ "OrbStack" ]]; then
        info "START OrbStack"
        open -g /Applications/OrbStack.app
        sleep 0.5
        genact -s 10 --exit-after-modules 1 -m botnet
        genact -s 10 --exit-after-modules 1 -m bruteforce
    fi

    DEVBOX_DOTFILES_PATH=~/git/dotfiles/conf/devbox
    DOCKERFILE=${DEVBOX_DOTFILES_PATH}/Dockerfile
    COMPOSE_FILE=${DEVBOX_DOTFILES_PATH}/docker-compose.yml
    IGNORE_FILE=${DEVBOX_DOTFILES_PATH}/devbox_gitignore.txt

    # .devbox-XXXがない場合は作成し、設定をDL
    if ! ls -d .devbox*/ > /dev/null 2>&1; then
        # 手動でイメージを削除すると、ここでの重複回避の対象に引けないため
        # 再度ビルドしたときなどに重複する恐れがある
        # 重複した場合はあとガチで、前の同名コンテナは停止するだけ。
        # 手動でけさなきゃいい！
        info "[INITIATION] CREATE DIR \e[32m.devbox-XXX"
        info "[INITIATION] Please \e[31mDO NOT DELETE \e[34mdocker image startsWith \e[32mdevbox-"

        # 現在の位置に.devbox-XXXを作成
        # docker-composeは自動で「フォルダ名-サービス名」でコンテナ命名する
        # .devbox-XXX/docker-compose.ymlならdevbox-XXX-sandbox
        CONTAINERS=$(docker images --format='{{.Repository}}')
        info "[INITIATION] CONTAINERS: \e[37m$CONTAINERS"
        S=".devbox-$RANDOM"
        while [[ $CONTAINERS =~ $S ]]; do
            S=".devbox-$RANDOM"
        done
        info "[INITIATION] create: \e[32m$S"
        mkdir $S

        # コンテナ設定を取得
        info " >> install Dockerfile docker-compose.yml from dotfiles"
        cp $DOCKERFILE $S
        cp $COMPOSE_FILE $S

        # 作業用volumeを作成
        info " >> create work volume"
        mkdir -p $S/vol

        # gitignoreを追加、devbox配下に配置しvol以外を無視する
        info " >> add .gitignore"
        cp $IGNORE_FILE $S/.gitignore

        info "[INITIATION] initiation completed"
        echo
    fi

    # コンテナ設定のチェックサムを取得
    info "checking checksum from dotfiles"
    DOCKERFILE_MD5=$(md5 $DOCKERFILE | cut -d "=" -f 2)
    DOCKER_COMPOSE_MD5=$(md5 $COMPOSE_FILE | cut -d "=" -f 2)

    # コンテナ設定を確認
    S=$(ls -d .devbox*/)
    cd $S

    # 現在のコンテナ設定のチェックサムを取得
    CURRENT_DOCKERFILE_MD5=$(md5 Dockerfile | cut -d "=" -f 2)
    CURRENT_DOCKER_COMPOSE_MD5=$(md5 docker-compose.yml | cut -d "=" -f 2)

    echo "dockerfile"
    echo $DOCKERFILE_MD5
    echo $CURRENT_DOCKERFILE_MD5
    echo "docker-compose"
    echo $DOCKER_COMPOSE_MD5
    echo $CURRENT_DOCKER_COMPOSE_MD5

    # 新規作成でない場合で、元ファイルに更新があった場合に反映するため再ビルド
    if [ "$1" = "re"  ] || [ $DOCKERFILE_MD5 != $CURRENT_DOCKERFILE_MD5 ] || [ $DOCKER_COMPOSE_MD5 != $CURRENT_DOCKER_COMPOSE_MD5 ]; then
        info "[!!] Update was detected"

        # 最新にする
        cp $DOCKERFILE .
        cp $COMPOSE_FILE .
        info "Build Docker image"

        # オプション指定の場合はキャッシュを見ない
        if [ "$1" = "re"  ]; then
            docker-compose build --no-cache
        else
            docker-compose build
        fi
    fi

    # クリップボード共有用
    \rm -rf shared-register && mkdir shared-register && cd shared-register
    echo $(pbpaste) > clip
    echo $(ls -l clip) > tmp
    cd ..
    watch_shared_clipboard() {
        while [ 1 ]; do
            # フォルダが消えたらループ終了
            if [ ! -d shared-register ]; then
                return
            fi
            LATEST=$(cat shared-register/tmp)
            CURRENT=$(cd shared-register && ls -l clip)
            if [[ "$LATEST" != "$CURRENT" ]]; then
                pbcopy < shared-register/clip
                echo $CURRENT > shared-register/tmp
            fi
            sleep 1
        done
    }
    watch_shared_clipboard & # バックグラウンドで実行

    # 起動
    info "Start Dev Container for Sandbox"
    docker-compose up -d

    # ログイン
    info "Login"
    docker-compose exec -it -w /work sandbox zsh

    # 抜けたときの処理
    \rm -rf shared-register
    cd ..
    info "Welcome back to HOST PC"
    exec $SHELL -l
}

# devbox関連の操作コマンド一覧
devbox-ctrl() {
    if [ "$(uname)" = "Linux" ]; then
        warn "Already in Dev Container Box"
        return
    fi
    LIST=(
        "[ ] devbox start"
        "[ file](on devbox) cp file into devbox/vol"
        "[ file](on devbox) cp ~/Downloads file into devbox/vol"
        "[  crush](on devbox) current devbox"
        "[  crush] all devbox"
        "[cancel]"
    )
    info "Choose devbox Ctrl"
    LEN=$(expr ${#LIST[@]} + 3)
    # TODO ここ修正
    #gum choose --height $LEN --cursor="❯ " --header="Choose tool:" $LIST
    TARGET=$(gum choose --height $LEN --cursor="❯ " --header="Choose tool:" $LIST)
    case $TARGET in
        "[ ] devbox start")
            CMD="devbox"
            ;;
        "[ file](on devbox) cp file into devbox/vol")
            if ! ls -d .devbox*/ > /dev/null 2>&1; then
                error "No devbox"
                return
            fi
            ls -AF | gum choose --no-limit --height 20 --cursor='❯ ' --header='current file / dir:' \
                | xargs -I {} cp -R {} .devbox-**/vol \
                && info 'cp to devbox/vol'
            return
            #CMD='info "Choose Current file / dir"'
            #CMD="$CMD && ls -AF | gum choose --no-limit --height 20 --cursor='❯ ' --header='current file / dir:'"
            #CMD="$CMD | xargs -I {} cp -R {} .devbox-**/vol"
            #CMD="$CMD && info 'cp to devbox/vol'"
            ;;
        "[ file](on devbox) cp ~/Downloads file into devbox/vol")
            if ! ls -d .devbox*/ > /dev/null 2>&1; then
                error "No devbox"
                return
            fi
            CMD='info "Choose DL file"'
            CMD="$CMD && ls -AF ~/Downloads | grep -v / | gum choose --no-limit --cursor='❯ ' --header='DL file:'"
            CMD="$CMD | xargs -I {} cp ~/Downloads/{} .devbox-**/vol"
            CMD="$CMD && info 'cp DL files to devbox/vol'"
            ;;
        "[  crush](on devbox) current devbox")
            if ! ls -d .devbox*/ > /dev/null 2>&1; then
                error "No devbox"
                return
            fi
            S=$(ls -d .devbox*/ | sed 's/^\.//; s/\/$//')
            STOP='docker stop $(docker ps -aq -f name='$S')'
            RM='docker rm $(docker ps -aq -f name='$S')'
            DELNET='docker network rm $(docker network ls --format '\''{{.Name}}'\'' | grep '$S')'
            RMI='docker rmi $(docker images --format '\''{{.Repository}}'\'' | grep '$S')'
            CMD="gum spin --title 'stop a devbox container...' -- $STOP"
            CMD="$CMD && info 'stop a devbox'"
            CMD="$CMD && gum spin --title 'delete a devbox container...' -- $RM"
            CMD="$CMD && info 'delete a devbox'"
            CMD="$CMD && gum spin --title 'delete a devbox network...' -- $DELNET"
            CMD="$CMD && info 'delete a devbox network'"
            CMD="$CMD && gum spin --title 'delete a image...' -- $RMI"
            CMD="$CMD && info 'delete a devbox image'"
            CMD="$CMD && rm -rf .devbox*/"
            CMD="$CMD && info 'delete .devbox directory'"
            ;;
        "[  crush] all devbox")
            STOP='docker stop $(docker ps -aq -f name=^devbox)'
            RM='docker rm $(docker ps -aq -f name=^devbox)'
            DELNET='docker network rm $(docker network ls --format '\''{{.Name}}'\'' | grep devbox)'
            RMI='docker rmi $(docker images --format '\''{{.Repository}}'\'' | grep devbox)'
            CMD="gum spin --title 'stop all devbox containers...' -- $STOP"
            CMD="$CMD && info 'stop all devbox'"
            CMD="$CMD && gum spin --title 'delete all devbox containers...' -- $RM"
            CMD="$CMD && info 'delete all devbox'"
            CMD="$CMD && gum spin --title 'delete all devbox networks...' -- $DELNET"
            CMD="$CMD && info 'delete all devbox networks'"
            CMD="$CMD && gum spin --title 'delete all devbox images...' -- $RMI"
            CMD="$CMD && info 'delete all devbox images'"
            CMD="$CMD && info '\e[31m remain .devbox directories'"
            ;;
        *)
            info "Skipped"
            return
            ;;
    esac
    confirm $CMD
}

