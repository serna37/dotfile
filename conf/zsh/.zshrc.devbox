# ========================================================
# ========================================================
# ||          Dev Container for SandBox                 ||
# ========================================================
# ========================================================

# 開発用のsandboxコンテナを起動する
# 現在フォルダで、なければdevbox-XXXフォルダを作成し
# dotfile/conf/devboxの設定の最新を反映して、コンテナ起動する
devbox() {
    logo_docker
    logo_dev_container
    logo_for_sandbox

    # エンジンが動いてないなら起動
    APP_LIST=$(osascript -e 'tell application "System Events" to get name of (processes where background only is false)')
    if [[ ! $APP_LIST =~ "OrbStack" ]]; then
        echo_info "START OrbStack"
        open -g /Applications/OrbStack.app
        sleep 0.5
        loading_long
    fi

    DOCKERFILE=~/git/dotfiles/conf/devbox/Dockerfile
    COMPOSE_FILE=~/git/dotfiles/conf/devbox/docker-compose.yml
    BASHRC=~/git/dotfiles/conf/devbox/profile/.bashrc
    VIMRC=~/git/dotfiles/conf/devbox/profile/.vimrc

    # .devbox-XXXがない場合は作成し、設定をDL
    if ! ls -d .devbox*/ > /dev/null 2>&1; then
        # 手動でイメージを削除すると、ここでの重複回避の対象に引けないため
        # 再度ビルドしたときなどに重複する恐れがある
        # 重複した場合はあとガチで、前の同名コンテナは停止するだけ。
        # 手動でけさなきゃいい！
        echo_info "[INITIATION] CREATE DIR \e[32m.devbox-XXX"
        echo_info "[INITIATION] Please \e[31mDO NOT DELETE \e[34mdocker image startsWith \e[32mdevbox-"
        loading 2 "Initiating..."

        # 現在の位置に.devbox-XXXを作成
        # docker-composeは自動で「フォルダ名-サービス名」でコンテナ命名する
        # .devbox-XXX/docker-compose.ymlならdevbox-XXX-sandbox
        CONTAINERS=$(docker images --format='{{.Repository}}')
        echo_info "[INITIATION] CONTAINERS: \e[37m$CONTAINERS"
        S=".devbox-$RANDOM"
        while [[ $CONTAINERS =~ $S ]]; do
            S=".devbox-$RANDOM"
        done
        echo_info "[INITIATION] create: \e[32m$S"
        mkdir $S
        loading 1 "creating $S ..."

        # コンテナ設定を取得
        echo_info " >> install Dockerfile docker-compose.yml from dotfiles"
        cp $DOCKERFILE $S
        cp $COMPOSE_FILE $S

        # プロファイルを取得
        echo_info " >> install profiles from dotfiles"
        mkdir -p $S/profile
        cp $BASHRC $S/profile
        cp $VIMRC $S/profile

        # 作業用volumeを作成
        echo_info " >> create work volume"
        mkdir -p $S/vol

        loading 3 "setup profiles..."
        echo_info "[INITIATION] initiation completed"
        echo
    fi

    # コンテナ設定のチェックサムを取得
    echo_info "checking checksum from dotfiles"
    DOCKERFILE_MD5=$(md5 $DOCKERFILE | cut -d "=" -f 2)
    DOCKER_COMPOSE_MD5=$(md5 $COMPOSE_FILE | cut -d "=" -f 2)
    BASHRC_MD5=$(md5 $BASHRC | cut -d "=" -f 2)
    VIMRC_MD5=$(md5 $VIMRC | cut -d "=" -f 2)

    # コンテナ設定を確認
    S=$(ls -d .devbox*/)
    cd $S

    # 現在のコンテナ設定のチェックサムを取得
    CURRENT_DOCKERFILE_MD5=$(md5 Dockerfile | cut -d "=" -f 2)
    CURRENT_DOCKER_COMPOSE_MD5=$(md5 docker-compose.yml | cut -d "=" -f 2)
    CURRENT_BASHRC_MD5=$(md5 profile/.bashrc | cut -d "=" -f 2)
    CURRENT_VIMRC_MD5=$(md5 profile/.vimrc | cut -d "=" -f 2)

    echo $DOCKERFILE_MD5
    echo $CURRENT_DOCKERFILE_MD5
    echo $DOCKER_COMPOSE_MD5
    echo $CURRENT_DOCKER_COMPOSE_MD5
    echo $BASHRC_MD5
    echo $CURRENT_BASHRC_MD5
    echo $VIMRC_MD5
    echo $CURRENT_VIMRC_MD5

    loading 1 "checking files..."

    # 新規作成でない場合で、元ファイルに更新があった場合に反映するため再ビルド
    if [ $DOCKERFILE_MD5 != $CURRENT_DOCKERFILE_MD5 ] || [ $DOCKER_COMPOSE_MD5 != $CURRENT_DOCKER_COMPOSE_MD5 ]; then
        echo_info "[!!] Update was detected"
        loading 1 "Loading..."

        # コンテナ設定を更新
        echo_info "Re install Dockerfile docker-compose.yml from dotfiles"
        cp $DOCKERFILE .
        cp $COMPOSE_FILE .
        loading 1 "ready to build docker..."

        echo_info "Build Docker image"
        docker-compose build
    fi

    # コンテナプロファイルに更新があった場合に反映
    if [ $BASHRC_MD5 != $CURRENT_BASHRC_MD5 ] || [ $VIMRC_MD5 != $CURRENT_VIMRC_MD5 ]; then
        echo_info "[!!] Update was detected"
        loading 1 "checking files..."

        # コンテナ設定を更新
        echo_info "Re install .bashrc .vimrc from dotfiles"
        cp $BASHRC .
        cp $VIMRC .
        loading 1 "apply dotfiles profile..."
    fi

    # 起動してログイン
    echo_info "Start Dev Container for Sandbox"
    docker-compose up -d
    # TODO zshにしたい、Dockerfileの修正とともに変更
    echo_info "And Login"
    loading 1 "ready to login..."
    docker-compose exec -it -w /work sandbox bash

    # 抜けたときに元のフォルダに戻っておく
    cd ..
    echo_info "Welcome back to HOST PC"
}

