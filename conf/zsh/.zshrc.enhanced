# ======================================================
# ENHANCED COMMAND SETTINGS
# ======================================================
# zoxide
eval "$(zoxide init zsh)"
export _ZO_FZF_OPTS='
    --no-sort --height 75% --reverse --margin=0,1 --exit-0 --select-1
    --bind ctrl-f:page-down,ctrl-b:page-up
    --bind pgdn:preview-page-down,pgup:preview-page-up
    --prompt="❯ "
    --color bg+:#262626,fg+:#dadada,hl:#f09479,hl+:#f09479
    --color border:#303030,info:#cfcfb0,header:#80a0ff,spinner:#36c692
    --color prompt:#87afff,pointer:#ff5189,marker:#f09479
    --preview "([[ -e '{2..}/README.md' ]] && bat --color=always --style=numbers --line-range=:50 '{2..}/README.md') || eza --color=always --group-directories-first --oneline {2..}"
'
# broot
source /Users/serna37/Library/Application\ Support/org.dystroy.broot/launcher/bash/br

# zsh-syntax-highlighting
source /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# zsh-autosuggestions
source /opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh

# zsh-git-prompt
source /opt/homebrew/opt/zsh-git-prompt/zshrc.sh

# powerlevel10k
source $(brew --prefix)/opt/powerlevel10k/share/powerlevel10k/powerlevel10k.zsh-theme
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# pecoのバックiサーチ
function peco-select-history() {
    local tac
    if which tac > /dev/null; then
        tac="tac"
    else
        tac="tail -r"
    fi
    BUFFER=$(\history -n 1 | \
        eval $tac | \
        peco --query "$LBUFFER")
    CURSOR=$#BUFFER
    zle clear-screen
}
zle -N peco-select-history
bindkey '^r' peco-select-history

# historyのfzf
incremental_search_history() {
  selected=`history -E 0 | fzf --tac --height 75% --reverse --margin=0,1 | cut -b 25-`
  BUFFER=`[ ${#selected} -gt 0 ] && echo $selected || echo $BUFFER`
  CURSOR=${#BUFFER}
  zle redisplay
}
zle -N incremental_search_history
bindkey "^h" incremental_search_history

# チートシート呼び出し
cheat() {
    curl cheat.sh/$1
}

# Gifへ変換
gif() {
    if [ $# != 2 ]; then
        echo "Usage:"
        echo "  gif [basefile] [output-name.gif]"
        echo "Alias Of:"
        echo "  ffmpeg -i [basefile] -r 10 [output-name.gif]"
    else
        ffmpeg -i $1 -r 10 $2
        l
    fi
}

# Google検索
google() {
  local str opt
  if [ $# != 0 ]; then
    for i in $*; do
      str="$str${str:++}$i"
    done
    opt='search?num=100'
    opt="${opt}&q=${str}"
  fi
  open -a Google\ Chrome http://www.google.co.jp/$opt
}

# docker ロゴ
logo_docker() {
    echo -e "\e[36m"
    echo ""
    echo "                       .."
    echo "                      (NNNN!"
    echo "                      (NMNM_"
    echo "           (J..J-..JJ,.JJ..."
    echo "           -NNMM<MNNMF(NNNN_        .gx-"
    echo "           (MMMM!MMMM5(MMMM!        dNNNx         "
    echo "      MMNM@-MNNM<MNMNF(MNNN_NNNMF  .MNNNN&(-. . "
    echo "      MNNN@(NMNN:MNNNF(NNMN<MNNNF  .NNMNNNNNNNN;  "
    echo "    .-???<!.?<<? <<??:(??<< ??<<!.-.(NNMNNNNNM9."
    echo "  .NNMNNMNMNNMNNNNNNMNNNNNNNNNMNNNNMNNMNMMH =_    "
    echo "  ,NMNMNNMNMNNMNMNMNNNNMNNMNNNNNMNNMNNN@  .     "
    echo "  ,NNNNMNNNNNMNNNMNNMNNMNMNNMMNNMNNMNN@ .         "
    echo "   qMNMNMNMNNMNMNNMNNMNNNNNNMNNMNNMNMD.           "
    echo "    WNNMNNMNNNMNNNMNNNMNMMNNNNMNNMN#!"
    echo "     TNNMNNMNMNNMNNMNNNMNNMNMNNNM@!"
    echo "      .TNMNNMNNMNNMNMNNNNNNMNMY="
    echo "         ? MMNMNNMNNNMMMMW = "
    echo "                 ~~  "
    echo ""
    echo -e "\e[m"
}

# docker dev用コンテナ起動ロゴ
logo_dev_container() {
    echo -e "\e[32m"
    echo "      _                                                    _ ";
    echo "     | |                                      _           (_) ";
    echo "   _ | |  ____  _   _     ____   ___   ____  | |_    ____  _  ____    ____   ____ ";
    echo "  / || | / _  )| | | |   / ___) / _ \ |  _ \ |  _)  / _  || ||  _ \  / _  ) / ___) ";
    echo " ( (_| |( (/ /  \ V /   ( (___ | |_| || | | || |__ ( ( | || || | | |( (/ / | | ";
    echo "  \____| \____)  \_/     \____) \___/ |_| |_| \___) \_||_||_||_| |_| \____)|_| ";
    echo -e "\e[m"
}
logo_for_sandbox() {
    echo -e "\e[32m"
    echo "   ___                                          _  _ ";
    echo "  / __)                                        | || | ";
    echo " | |__   ___    ____     ___   ____  ____    _ | || | _    ___   _   _ ";
    echo " |  __) / _ \  / ___)   /___) / _  ||  _ \  / || || || \  / _ \ ( \ / ) ";
    echo " | |   | |_| || |      |___ |( ( | || | | |( (_| || |_) )| |_| | ) X ( ";
    echo " |_|    \___/ |_|      (___/  \_||_||_| |_| \____||____/  \___/ (_/ \_) ";
    echo -e "\e[m"
}

# python ロゴ
logo_py() {
    echo -e "\e[33m"
    echo "                     ..+QWgmgmgg@@HmaJ,                       "
    echo "                   -qqqHHmmgggg@@@@@@@@N,                     "
    echo "                  .kqP   ?gggg@@@@@@@HHHH[                    "
    echo "                  -qqL   .g@@@@@@@@HH@HHH#                    "
    echo "                  -mmmmgg@@@@@@@@H@H@HHHH#                    "
    echo "                  (YYYYYYYYYYYM@H@HHHHHHH#                    "
    echo "          ...J++++++++++++++++H@HHHHHHH###  ......            "
    echo "        .dkqqqmggggggg@@@@@@@H@HHHHHHH####  ~~~~~~~_          "
    echo "       .qqkqqmmgggg@@@@@@@@HHHHHHHHH######  ~~~~~~~~_         "
    echo "      .kqqqqmmgggg@@@@@@@HH@HHHHHHH######F .~~~~~~~~~_        "
    echo "      (qqqmmggggg@@@@@@@H@HHHHHHHH######M' ~~~~~~~:~:~        "
    echo "      Xqqmmgggg@@@@@@@HHHHHHHHHH#######' .~~~~~~~:~:::'       "
    echo "      mmmgggg@@@@@@@Y=''        ''''  ..~~~~~:~::~:~::.       "
    echo "      Wggggg@@@@@@Y  _~~~~~~~~~~~~~~~~~~~:~::~::::::::'       "
    echo "      (ggg@@@@@@@F -~~.~~.~~~~~.~~~~~~~~:~:~::~::::::<        "
    echo "      .H@@@@@@@HH' ~.~~.~~.~~.~~~~~~~:~:~:~::::::::::!        "
    echo "      '?@@@@@@H@H  ~~.~~~~~~~~~~~~~~:~::::::::::::::!         "
    echo "        (M@@HH@HH  ~~~~~~~~~~~~~:~::~::~:::::::::;:!          "
    echo "          .7'''''  ~~~~~~~~~~:_'~~~~~~~~~~~~~~~~~''           "
    echo "                   ~~~~~~~~::~____________                    "
    echo "                   ~~~~~:~:~::::::::<<:::<                    "
    echo "                   ~~~:~::~:::::::_'   ::<'                   "
    echo "                   ~::~:::::::::::<.  .;;!                    "
    echo "                    _~::::::::::;:::;;:!'                     "
    echo "                       '~~<::::;:<<!~' '                      "
    echo -e "\e[m"
}

# python localhost ロゴ
logo_py_localhost() {
    logo_py
    echo -e "\e[32m"
    echo "  _                       _  _                             _____    ______   ______   ______ ";
    echo " | |                     | || |                  _        / ___ \  / __   | / __   | / __   | ";
    echo " | |  ___    ____   ____ | || | _    ___    ___ | |_   _ ( (   ) )| | //| || | //| || | //| | ";
    echo " | | / _ \  / ___) / _  || || || \  / _ \  /___)|  _) (_) > > < < | |// | || |// | || |// | | ";
    echo " | || |_| |( (___ ( ( | || || | | || |_| ||___ || |__  _ ( (___) )|  /__| ||  /__| ||  /__| | ";
    echo " |_| \___/  \____) \_||_||_||_| |_| \___/ (___/  \___)(_) \_____/  \_____/  \_____/  \_____/ ";
    echo -e "\e[m"
}

# python 仮想環境 ロゴ
logo_py_venv() {
    logo_py
    echo -e "\e[32m"
    echo "    ____    ____  _______ .__   __. ____    ____ ";
    echo "    \   \  /   / |   ____||  \ |  | \   \  /   / ";
    echo "     \   \/   /  |  |__   |   \|  |  \   \/   / ";
    echo "      \      /   |   __|  |  .    |   \      / ";
    echo "       \    /    |  |____ |  |\   |    \    / ";
    echo "        \__/     |_______||__| \__|     \__/ ";
    echo -e "\e[m"
    sleep 0.5
}

# C++ ロゴ
logo_cpp() {
    echo -e "\e[34m"
    echo "                     .(XyyS&,                    "
    echo "                  .JyZZZZyZyyyn..                "
    echo "              ..dyyZZyyyZZyZZyZyyk-.             "
    echo "            .yyyZyZ0=!      _7XZZyyyW,           "
    echo "            dZZZyZ=            ?yQgMH#           "
    echo "            dyZyZ'    .dyyk.  .&HHHHH#           "
    echo "            dZyyr    dyZyyXQMHH@4HHYM#           "
    echo "            dZZy[   .yyQNMMHHHh,..&..K           "
    echo "            dyZZn    ?MNNNNMDTMHHHHHH#           "
    echo '            dyyZQa     ?""^     WMHHH#           '
    echo "            zQNNNMN,          .MNMNMM#           "
    echo '             THNMNNNMN&....(MNNNNMM#"            '
    echo "                ?YMNNNNMNNNNNNMMY=               "
    echo '                   .TMNNNMNMM"                   '
    echo '                       7"""`                     '
    echo -e "\e[m"
}

# C++ セットアップ ロゴ
logo_cpp_setup() {
    logo_cpp
    echo -e "\e[32m"
    echo "                      _ ";
    echo "          ___   ____ | |_   _   _  ____ ";
    echo "         /___) / _  )|  _) | | | ||  _ \ ";
    echo "        |___ |( (/ / | |__ | |_| || | | | ";
    echo "        (___/  \____) \___) \____|| ||_/ ";
    echo "                                  |_| ";
    echo -e "\e[m"
    sleep 0.5
}

# AtCoder ロゴ
logo_atcoder() {
    echo '                                               .'
    echo '                                             .dN.'
    echo '                                          ..d@M#J#(,'
    echo '                                       vRMPMJNd#dbMG#(F'
    echo '                             (O.  U6..  WJNdPMJFMdFdb#`  .JU` .Zo'
    echo '                          .. +NM=(TB5.-^.BMDNdJbEddMd ,n.?T@3?MNm  ..'
    echo '                         .mg@_J~/?`.a-XNxvMMW9""TWMMF.NHa._ ?_,S.Tmg|'
    echo '                      .Js ,3,`..-XNHMT"= ...d"5Y"X+.. ?"8MNHHa.. (,b uZ..'
    echo '                     J"17"((dNMMB"^ ..JTYGJ7"^  ?"T&JT9QJ..?"TMNNHa,?727N'
    echo '                     .7    T"^..JT"GJv"=`             ?"4JJT9a.,?T"`  .7!'
    echo '                             M~JY"!     ....<.Zj+,(...     .7Ta_M'
    echo '                 .JWkkWa,    d-F     .+;.ge.ga&.aa,ua+.g,     ,}#    .(Wkkkn,'
    echo '                .W9AaeVY=-.. J;b   .XH3dHHtdHHDJHHH(HHH(WH,   J(F  ..?T4agdTH-'
    echo '                 6XkkkH=!    ,]d  .HHtdHHH.HHHbJHHH[WHHH(HHL  k.]    _7HkkkHJ:'
    echo '                 JqkP?H_      N(; TYY?YYY9(YYYD?YYYt7YYY\YY9 .Fd!     .WPjqqh'
    echo '                 .mmmH,``      d/b WHHJHH@NJHHH@dHHHFdHHHtHH#`.1#       `(dqqq]'
    echo '                ,gmmgghJQQVb  ,bq.,YY%7YYY(YYY$?YYY^TYYY(YY^ K.]  JUQmAJmmmmg%'
    echo '                 ggggggggh,R   H,]  T#mTNNbWNN#dNN#(NN@(N@! .t#   d(Jgggggggg:'
    echo '                .@@@@@#"_JK4,  ,bX.   ?i,1g,jge.g2+g2i,?`   K.t  .ZW&,7W@@@@@h.'
    echo '            `..H@@@@@P   7 .H`  W/b        .^."?^(!        -1#   W, ?   T@@@@@Ma,`'
    echo '            dH@HHHM"       U\   .N,L        ..            .$d    .B`     ."MHHH@HN.'
    echo '       ....JMHHHHH@              ,N(p      .dH.d"77h.    .$J\              dHHHHHMU....'
    echo '      ` WHH#,7MHHM{               ,N,h     d^.W,        .^J^               .MHHM"_d#HN.'
    echo '       ,jH#Mo .MMW:                .W,4,  J\   Ta.-Y` .J(#                 .HMM- .M#MF!'
    echo '         .MN/ d@?M+                  7e(h.           .3.F                  .MDd# (MML`'
    echo '         .M4%  ?H, 7a,                .S,7a.       .Y.#^                .,"`.d=  ,PWe'
    echo '        .! ?     dN .N,                 (N,7a.   .Y(d=                 .d! d@     4 .!'
    echo '                 .W` .!                   ?H,?GJ".d"                    ^  B'
    echo '                                            (SJ.#='
    echo '                           J             ....            .M:'
    echo '                          JUb     .   .#    (\            M~'
    echo '                         .\.M;  .W@"` M}       .y7"m. .J"7M~ .v74e ,M7B'
    echo '                        .F  ,N.  J]   M]       M)  JF M_  M~ d-     M`'
    echo '                       .W,  .db, Jh.   Th...J\ /N..Y` ?N-.Ma.-M&.> .M-'
    echo ""
    echo ""
    sleep 0.5
}

# ========================================================
# ========================================================
# ||          Dev Container for SandBox                 ||
# ========================================================
# ========================================================
# 開発用のsandboxコンテナを起動する
# 現在フォルダで、なければdevbox-XXXフォルダを作成し
# dotfile/conf/devboxの設定の最新を反映して、コンテナ起動する
devbox() {
    logo_docker
    logo_dev_container
    logo_for_sandbox

    # エンジンが動いてないなら起動
    APP_LIST=$(osascript -e 'tell application "System Events" to get name of (processes where background only is false)')
    if [[ ! $APP_LIST =~ "OrbStack" ]]; then
        echo -e "\e[32m[\e[34mINFO\e[32m] \e[34mSTART OrbStack\e[m"
        open -g /Applications/OrbStack.app
        sleep 0.5
        if command -v genact > /dev/null 2>&1; then
            genact -s 10 --exit-after-modules 1 -m botnet
            genact -s 10 --exit-after-modules 1 -m bruteforce
        fi
    fi

    DOCKERFILE=~/git/dotfiles/conf/devbox/Dockerfile
    COMPOSE_FILE=~/git/dotfiles/conf/devbox/docker-compose.yml
    BASHRC=~/git/dotfiles/conf/devbox/profile/.bashrc
    VIMRC=~/git/dotfiles/conf/devbox/profile/.vimrc

    # .devbox-XXXがない場合は作成し、設定をDL
    if ! ls -d .devbox*/ > /dev/null 2>&1; then
        # 手動でイメージを削除すると、ここでの重複回避の対象に引けないため
        # 再度ビルドしたときなどに重複する恐れがある
        # 重複した場合はあとガチで、前の同名コンテナは停止するだけ。
        # 手動でけさなきゃいい！
        echo -e "\e[32m[\e[34mINFO\e[32m] \e[34m[INITIATION] CREATE DIR \e[32m.devbox-XXX\e[m"
        echo -e "\e[32m[\e[34mINFO\e[32m] \e[34m[INITIATION] Please \e[31mDO NOT DELETE \e[34mdocker image startsWith \e[32mdevbox-\e[m"
        if command -v gum > /dev/null 2>&1; then
            gum spin -- sleep 2
        fi

        # 現在の位置に.devbox-XXXを作成
        # docker-composeは自動で「フォルダ名-サービス名」でコンテナ命名する
        # .devbox-XXX/docker-compose.ymlならdevbox-XXX-sandbox
        CONTAINERS=$(docker images --format='{{.Repository}}')
        echo -e "\e[32m[\e[34mINFO\e[32m] \e[34m[INITIATION] CONTAINERS: \e[37m$CONTAINERS\e[m"
        S=".devbox-$RANDOM"
        while [[ $CONTAINERS =~ $S ]]; do
            S=".devbox-$RANDOM"
        done
        echo -e "\e[32m[\e[34mINFO\e[32m] \e[34m[INITIATION] create: \e[32m$S\e[m"
        mkdir $S
        if command -v gum > /dev/null 2>&1; then
            gum spin -- sleep 1
        fi

        # コンテナ設定を取得
        echo -e "\e[32m[\e[34mINFO\e[32m] \e[34m >> install Dockerfile docker-compose.yml from dotfiles\e[m"
        cp $DOCKERFILE $S
        cp $COMPOSE_FILE $S

        # プロファイルを取得
        echo -e "\e[32m[\e[34mINFO\e[32m] \e[34m >> install profiles from dotfiles\e[m"
        mkdir -p $S/profile
        cp $BASHRC $S/profile
        cp $VIMRC $S/profile

        # 作業用volumeを作成
        echo -e "\e[32m[\e[34mINFO\e[32m] \e[34m >> create work volume\e[m"
        mkdir -p $S/vol

        if command -v gum > /dev/null 2>&1; then
            gum spin -- sleep 3
        fi
        echo -e "\e[32m[\e[34mINFO\e[32m] \e[34m[INITIATION] initiation completed.\e[m"
        echo
    fi

    # コンテナ設定のチェックサムを取得
    echo -e "\e[32m[\e[34mINFO\e[32m] \e[34mchecking checksum from dotfiles\e[m"
    DOCKERFILE_MD5=$(md5 $DOCKERFILE | cut -d "=" -f 2)
    DOCKER_COMPOSE_MD5=$(md5 $COMPOSE_FILE | cut -d "=" -f 2)
    BASHRC_MD5=$(md5 $BASHRC | cut -d "=" -f 2)
    VIMRC_MD5=$(md5 $VIMRC | cut -d "=" -f 2)

    # コンテナ設定を確認
    S=$(ls -d .devbox*/)
    cd $S

    # 現在のコンテナ設定のチェックサムを取得
    CURRENT_DOCKERFILE_MD5=$(md5 Dockerfile | cut -d "=" -f 2)
    CURRENT_DOCKER_COMPOSE_MD5=$(md5 docker-compose.yml | cut -d "=" -f 2)
    CURRENT_BASHRC_MD5=$(md5 profile/.bashrc | cut -d "=" -f 2)
    CURRENT_VIMRC_MD5=$(md5 profile/.vimrc | cut -d "=" -f 2)

    echo $DOCKERFILE_MD5
    echo $CURRENT_DOCKERFILE_MD5
    echo $DOCKER_COMPOSE_MD5
    echo $CURRENT_DOCKER_COMPOSE_MD5
    echo $BASHRC_MD5
    echo $CURRENT_BASHRC_MD5
    echo $VIMRC_MD5
    echo $CURRENT_VIMRC_MD5

    if command -v gum > /dev/null 2>&1; then
        gum spin -- sleep 1
    fi

    # 新規作成でない場合で、元ファイルに更新があった場合に反映するため再ビルド
    if [ $DOCKERFILE_MD5 != $CURRENT_DOCKERFILE_MD5 ] || [ $DOCKER_COMPOSE_MD5 != $CURRENT_DOCKER_COMPOSE_MD5 ]; then
        echo -e "\e[32m[\e[34mINFO\e[32m] \e[34m[!!] Update was detected\e[m"
        if command -v gum > /dev/null 2>&1; then
            gum spin -- sleep 1
        fi

        # コンテナ設定を更新
        echo -e "\e[32m[\e[34mINFO\e[32m] \e[34mRe install Dockerfile docker-compose.yml from dotfiles\e[m"
        cp $DOCKERFILE .
        cp $COMPOSE_FILE .
        if command -v gum > /dev/null 2>&1; then
            gum spin -- sleep 1
        fi

        echo -e "\e[32m[\e[34mINFO\e[32m] \e[34mBuild Docker image\e[m"
        docker-compose build
    fi

    # コンテナプロファイルに更新があった場合に反映
    if [ $BASHRC_MD5 != $CURRENT_BASHRC_MD5 ] || [ $VIMRC_MD5 != $CURRENT_VIMRC_MD5 ]; then
        echo -e "\e[32m[\e[34mINFO\e[32m] \e[34m[!!] Update was detected\e[m"
        if command -v gum > /dev/null 2>&1; then
            gum spin -- sleep 1
        fi
        # コンテナ設定を更新
        echo -e "\e[32m[\e[34mINFO\e[32m] \e[34mRe install .bashrc .vimrc from dotfiles\e[m"
        cp $BASHRC .
        cp $VIMRC .
        if command -v gum > /dev/null 2>&1; then
            gum spin -- sleep 1
        fi
    fi

    # 起動してログイン
    echo -e "\e[32m[\e[34mINFO\e[32m] \e[34mStart Dev Container for Sandbox\e[m"
    docker-compose up -d
    # TODO zshにしたい、Dockerfileの修正とともに変更
    echo -e "\e[32m[\e[34mINFO\e[32m] \e[34mAnd login\e[m"
    if command -v gum > /dev/null 2>&1; then
        gum spin -- sleep 1
    fi
    docker-compose exec -it -w /work sandbox bash

    # 抜けたときに元のフォルダに戻っておく
    cd ..
    echo -e "\e[32m[\e[34mINFO\e[32m] Welcome back to HOST PC\e[34m\e[m"
}

