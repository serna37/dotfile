# ======================================================
# Custom Commands
# ======================================================
# pecoのバックiサーチ
peco-select-history() {
    local tac
    if which tac > /dev/null; then
        tac="tac"
    else
        tac="tail -r"
    fi
    BUFFER=$(\history -n 1 | \
        eval $tac | \
        peco --query "$LBUFFER")
    CURSOR=$#BUFFER
    zle clear-screen
}
zle -N peco-select-history
bindkey '^r' peco-select-history

# historyのfzf
incremental_search_history() {
  selected=`history -E 0 | fzf --tac --height 75% --reverse --margin=0,1 | cut -b 25-`
  BUFFER=`[ ${#selected} -gt 0 ] && echo $selected || echo $BUFFER`
  CURSOR=${#BUFFER}
  zle redisplay
}
zle -N incremental_search_history
bindkey "^h" incremental_search_history

# チートシート呼び出し
cheat() {
    curl cheat.sh/$1
}

# Google検索
google() {
  local str opt
  if [ $# != 0 ]; then
    for i in $*; do
      str="$str${str:++}$i"
    done
    opt='search?num=100'
    opt="${opt}&q=${str}"
  fi
  open -a Google\ Chrome http://www.google.co.jp/$opt
}

# ツール系のカスタムしたコマンドをリストで選択し実行
tool-box() {
    LIST=(
        "[ GitHub] gh-ctrl"
        "[ devbox] start devbox"
        "[ app] open application"
        "[ finder] open ."
        "[ venv]"
        "[ server] localhost 8000"
        "[ DB] gobang"
        "[ DB] edit connection"
        "[ SCP] termscp"
        "[ clock] show clock"
        "[ gif] convert mov -> gif"
        "[ find] fd"
        "[ fzf] fzf"
        "[ df] dust"
        "[ ps] procs"
        "[ top] btm"
        "[ zoxide] ls"
        "[ zoxide] rm filename"
        "[ x86 brew]"
        "[cancel]"
    )
    echo_info "Choose tool"
    LEN=$(expr ${#LIST[@]} + 3)
    TARGET=$(gum choose --height $LEN $LIST)
    case $TARGET in
        "[ GitHub] gh-ctrl")
            CMD="gh-ctrl"
            ;;
        "[ devbox] start devbox")
            CMD="devbox"
            ;;
        "[ app] open application")
            CMD='open "$(\fd -t d -d 1 . /Applications | \fzf)"'
            ;;
        "[ finder] open .")
            CMD='open .'
            ;;
        "[ venv]")
            CMD='logo_py_venv && python -m venv venv && . venv/bin/activate'
            ;;
        "[ server] localhost 8000")
            CMD='logo_py_localhost && python -m http.server 8000'
            ;;
        "[ DB] gobang")
            CMD='gobang'
            ;;
        "[ DB] edit connection")
            CMD='cd ~/git/dotfiles && v conf/gobang/config.toml'
            ;;
        "[ SCP] termscp")
            CMD='termscp'
            ;;
        "[ clock] show clock")
            CMD='tty-clock -sc -C2'
            ;;
        "[ gif] convert mov -> gif")
            FROM=$(ls -A | gum choose)
            TO=$(gum input --prompt "e.g.) test.gif: ")
            CMD="ffmpeg -i $FROM -r 10 $TO"
            ;;
        "[ find] fd")
            CMD='fd -H -E .git -E .DS_Store -t f'
            ;;
        "[ fzf] fzf")
            CMD="fzf --preview 'bat -n --color=always {}'"
            ;;
        "[ df] dust")
            CMD='dust'
            ;;
        "[ ps] procs")
            CMD='procs -t'
            ;;
        "[ top] btm")
            CMD='btm --battery --enable_cache_memory'
            ;;
        "[ zoxide] ls")
            CMD='zoxide query -ls'
            ;;
        "[ zoxide] rm filename")
            TO=$(gum input --prompt "del: ")
            CMD="(){zoxide remove $TO}"
            ;;
        "[ x86 brew]")
            CMD='arch -x86_64 /usr/local/bin/brew'
            ;;
        *)
            echo_info "Skipped"
            return
            ;;
    esac
    confirm $CMD "Skipped"
}

# GitHub CLIでのカスタムしたコマンドを一覧で選択
gh-ctrl() {
    LIST=(
        "Daily Algo v1"
        "Daily Algo v2"
        "Daily Algo v3"
        "Daily Algo POWER"
        "Daily Hacking"
        "PR develop <- feature"
        "PR release <- develop"
        "PR master  <- release"
        "[cancel]"
    )
    echo_info "Choose GitHub Ctrl"
    LEN=$(expr ${#LIST[@]} + 3)
    TARGET=$(gum choose --height $LEN $LIST)
    case $TARGET in
        "Daily Algo v1")
            CMD='cd ~/git/task && gh issue view 49 && gh issue close 49'
            ;;
        "Daily Algo v2")
            CMD='cd ~/git/task && gh issue view 172 && gh issue close 172'
            ;;
        "Daily Algo v3")
            CMD='cd ~/git/task && gh issue view 177 && gh issue close 177'
            ;;
        "Daily Algo POWER")
            CMD='cd ~/git/task && gh issue view 198 && gh issue close 198'
            ;;
        "Daily Hacking")
            CMD='cd ~/git/task && gh issue view 57 && gh issue close 57'
            ;;
        "PR develop <- feature")
            CMD='gh pr create --base develop --head $(git branch --contains | cut -d " " -f 2) --title "modify" --body ""'
            ;;
        "PR release <- develop")
            CMD='gh pr create --base release --head develop --title "Publish" --body ""'
            ;;
        "PR master  <- release")
            CMD='gh pr create --base master --head release --title "Publish" --body ""'
            ;;
        *)
            echo_info "Skipped"
            return
            ;;
    esac
    confirm $CMD "Skipped"
}

