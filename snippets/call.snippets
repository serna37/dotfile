# =========================================================
# call
# =========================================================
# graph
snippet dijk "dijk" b
auto [dis, route] = dijkstra<${1:long long}>(${2:G}, ${3:start});
endsnippet
snippet Bellman "BellmanFord" b
auto [dis, route] = BellmanFord<${1:long long}>(${2:G}, ${3:start});
endsnippet
snippet route "route restore" b
vector<int> ${1:rt} = route_restore(route, ${2:goal});
endsnippet
snippet Warshall "WarshallFroyd" b
auto [dis, negaCy] = WarshallFroyd<${1:long long}>(${2:G});
endsnippet
snippet cycle "cycle detect" b
vector<Edge<${1:long long}>> res = cycle_detect(${2:G}, ${3:true});
endsnippet

# tree
snippet kruskal "kruskal" b
MinSpanTree<${1:long long}> mst = kruskal(${2:edges}, ${3:N});
endsnippet

# set
snippet uf "union find" bi
UnionFind uf(${1:N});
endsnippet

# monoid
snippet mono_min "Monoid min" bi
Mmin<${1:int}>
endsnippet
snippet mono_max "Monoid max" bi
Mmax<${1:int}>
endsnippet
snippet mono_add "Monoid add" bi
Madd<${1:int}>
endsnippet
snippet mono_mul "Monoid mul" bi
Mmul<${1:int}>
endsnippet
snippet mono_gcd "Monoid gcd" bi
Mgcd<${1:int}>
endsnippet
snippet mono_act_sum_add "Monoid Acted sum add" bi
MAsumadd<${1:int}>
endsnippet
snippet mono_act_min_add "Monoid Acted min add" bi
MAminadd<${1:int}>
endsnippet

# range
snippet fwk "fwk" bi
FwkTree<${1}> fwk(${2:N});
endsnippet
snippet seg "seg" bi
SegTree<${1}> seg(${2:N});
endsnippet
snippet lseg "lseg" bi
LazySegTree<${1}> lseg(${2:N});
endsnippet
snippet starry "starry" b
StarrySkyTree<${1:int}> sst(${2:N});
endsnippet

# seq
snippet zip "zip" b
auto [comp, cvt] = zip(${1:A});
endsnippet

