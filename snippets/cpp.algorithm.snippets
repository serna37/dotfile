#*cpp.algorithm.snippets*        Version 1.0
#==============================================================================
#CONTENTS                                                 *cpp.algorithm*
#
#    Brute Force .................... |brute force|
#    Binary Search  ................. |binary search|
#    Range .......................... |sequence range algorithm|
#    Sequence ....................... |sequence, others algorithm|
#    Fenwick ........................ |fenwick tree|
#    BFS ............................ |BFS, grid|
#    DFS ............................ |DFS, tree|
#    DP ............................. |DP transition|
#
#==============================================================================

# =========================================================
# Brute Force
# =========================================================
snippet algo_brute_permutation "順列全探索" b
// =========================
// 順列全探索
// O(N!) N < 12程度
// 1 2 3,  1 3 2,  2 1 3,  2 3 1,  ...
do {${2}} while (next_permutation(${1:A}.begin(), $1.end()));
// ⭐️ ソートはしましたか？
endsnippet
snippet algo_brute_permutation_dfs_seq "DFS重複順列列挙" b
// =========================
// 順列全探索 DFSで重複順列列挙
// 単調増加ならO(N+M-1 choose M-1) 目安    N < 10程度(もうちょいいけるかも)
// $4 ~ $5 までの数で、要素数${1:N}の数列を順列全探索
vector<int> ${2:perm}($1);
auto ${3:dfs} = [&](auto &f, int mi, int mx, int last = 0) -> void {
	if (last == $1) {
		// ベースケース
		// 前周までで$1-1要素つくった、今=$1のとき終了
		${6:some}
		return;
	}
	for (int i = mi; i <= mx; ++i) {
		$2[last] = i;
		// 狭義単調増加の場合
		// 1 2 3 4 5
		// mi = i + 1;
		//
		// 広義単調増加の場合
		// 1 1 2 3 4 被りok
		// mi = i;
		f(f, mi, mx, last + 1);
	}
};
$3($3, ${4:1}, ${5:M});
endsnippet
snippet algo_brute_bit_loop "bit全探索" b
// =========================
// bit全探索
// O(2^N) N < 25程度
for (${1:long long} ${2:bit} = 0; $2 < (${3:1ll} << ${4:N}); ++$2) {
	${5:long long} tmp = 0;
	for (int k = 0; k < $4; ++k) {
		// k番目を使うかどうか
		if ($2 & ($3 << k)) {
			// bit = 11001 のとき
			// kは   01  4 が選ばれる
			tmp |= ${6:A}[k];
		}
	}
}
endsnippet
snippet algo_brute_bit_loop_2 "bit全探索 2重" b
// =========================
// bit全探索 2重
// O(2^N) N < 12程度
for (int bit = 0; bit < (1 << ${1:H}); ++bit) {
	for (int bit2 = 0; bit2 < (1 << ${2:W}); ++bit2) {
		vector<int> ${3:h}, ${4:w};
		for (int k = 0; k < $1; ++k) {
			// $1側の
			// k番目を使う場合、この配列にidx入れてる
			if (bit & (1 << k)) $3.push_back(k);
		}
		//
		for (int k = 0; k < $2; ++k) {
			// $2側の
			// k番目を使う場合、この配列にidx入れてる
			if (bit2 & (1 << k)) $4.push_back(k);
		}
		//
		// bit = 1100
		// bit2= 1000 のとき
		// h = {0, 1} 行目と
		// w = {0} 列目が選ばれている
	}
}
endsnippet
snippet algo_brute_bit_n_order "K進法N桁全探索" b
// =========================
// bit全探索 非再帰 重複順列列挙 O($2^$1) N < 10程度
// ${1:N}桁 ${2:K}進数
vector<int> bit($1, 0);
// bit = {0,0,0}, {0,0,1}, {0,1,0}, {0,1,1} ...
while (1) {
	// bit = {1,1,0} を左から見るループ
	for (int i = 0; i < $1; ++i) {
		int tmp = bit[i]; // i桁目の数字（$2進法）
	}
	// インクリメント
	int order = $1 - 1, stop = 0;
	while (1) {
		++bit[order]; // 下1桁目から増やす
		if (bit[order] < $2) break; // くりあげ終了
		//
		// 最大桁が溢れたら全体whileを終了
		if (order == 0) {
			stop = 1;
			break; 
		}
		//
		// 繰り上げるので今の桁は0、次の桁に行く
		bit[order--] = 0;
	}
	if (stop) break;
}
endsnippet
# TODO bit演算系としてまとめ直したい
snippet algo_brute_bit_on_all_pattern "bit on all pattern" b
for (long long i = ${1:N}; i > 0; i = (i - 1) & $1) {
	cout << $1 - i << endl;
}
cout << $1 << endl;
endsnippet

# =========================================================
# Binary Search
# =========================================================
snippet algo_bisearch "整数二分探索" b
// =========================
// にぶたん O(logN)
auto ${1:test} = [&](${2:long long} x) -> bool {
	// oになる条件を記述
	// x x x o o o o
	//       ↑ここを求める
	${3:return x >= K}
};
// $4: ダメな左側    $5: 満たす右側
$2 ${4:L} = 0, ${5:R} = 1, ${6:MID} = 0;
while (!$1($5)) $5 <<= 1; // 指数探索
while (abs($5 - $4) > 1) ($1($6 = $4 + ($5 - $4) / 2) ? $5 : $4) = $6;
cout << $5 << endl;
endsnippet
snippet algo_bisearch_real_numbers "実数二分探索" b
// =========================
// 実数にぶたん O(logN)
auto ${1:test} = [&](${2:double} x) -> bool {
	// oになる条件を記述
	// x x x o o o o
	//       ↑ここを求める
	${3:return x >= K}
};
// $4: ダメな左側    $5: 満たす右側
$2 ${4:L} = 0, ${5:R} = 1, ${6:MID} = 0;
while (!$1($5)) $5 *= 2; // 指数探索
while (abs($5 - $4) > EPS and abs($5 - $4) / max($5, $4) > EPS)
	($1($6 = $4 + ($5 - $4) / 2) ? $5 : $4) = $6;
cout << $5 << endl;
endsnippet
snippet algo_bisearch_ika_cnt_idx "以下の個数" b
// =========================
// $3のうち、$4以下の個数  =  $4より大きい最左のidx
//          ↓8の場合
// 0 1 2 3 4  5
// 1 2 2 3 4  21 22 23 23
// <------->|                  id:4, cnt:5
${1:int} ${2:cnt} = upper_bound(${3:A}.begin(), $3.end(), ${4:x}) - $3.begin();
endsnippet
snippet algo_bisearch_sita_cnt_idx "より下の個数" b
// =========================
// $3のうち、$4より下の個数  =  $4以上最左のidx
//         ↓4の場合
// 0 1 2 3 4
// 1 2 2 3 4 21 22 23 23
// <---->|                     id:3, cnt:4
${1:int} ${2:cnt} = lower_bound(${3:A}.begin(), $3.end(), ${4:x}) - $3.begin();
endsnippet
snippet algo_bisearch_izyou_cnt "以上の個数" b
// =========================
// 1 2 2 3 4 21 22 23 23
//         4
//         |<---------->
// $3のうち、$4以上の個数
${1:int} ${2:cnt} = ${3:A}.end() - lower_bound($3.begin(), $3.end(), ${4:x});
endsnippet
snippet algo_bisearch_ue_cnt "より上の個数" b
// =========================
// 1 2 2 3 4 21 22 23 23
//         4 |
//           |<-------->
// $3のうち、$4より大きい個数
${1:int} ${2:cnt} = ${3:A}.end() - upper_bound($3.begin(), $3.end(), ${4:x});
endsnippet
snippet algo_bisearch_ika_max "0, lim]" b
// =========================
// 1 2 2 3 4 21 22 23 23
//         4
// ------->o
// $2以下の最右
auto itr = ${1:st}.upper_bound(${2:A});
if (itr == $1.begin()) continue;
--itr;
endsnippet
snippet algo_bisearch_sita_max "0, lim)" b
// =========================
// 1 2 2 3 4 21 22 23 23
//       | 4
// ----->o
// $2より下の最右
auto itr = ${1:st}.lower_bound(${2:A});
if (itr == $1.begin()) continue;
--itr;
endsnippet
snippet algo_bisearch_izyou_min "[lim, N" b
// =========================
// 1 2 2 3 4 21 22 23 23
//         4
//         o<-----
// $2以上の最左
auto itr = ${1:st}.lower_bound(${2:A});
if (itr == $1.end()) continue;
endsnippet
snippet algo_bisearch_ue_min "(lim, N" b
// =========================
// 1 2 2 3 4 21 22 23 23
//         4 |
//           o<-----
// $2より大きい最左
auto itr = ${1:st}.upper_bound(${2:A});
if (itr == $1.end()) continue;
endsnippet

# =========================================================
# Range
# =========================================================
snippet algo_range_syakutori "尺取法" b
// =========================
// 尺取法 O(N)
// 連続の和が$4以下である、最大長を求める
// 1. lを固定し、できるだけrを増やす
// 2. 区間をひとつ右に。和の区間から左端が抜ける
// 3. 区間の個数はr-l個
for (int l = 0, r = 0, ${1:sum} = 0; l < ${2:N}; $1 -= ${3:A}[l++]) {
	// 2, 3, 1, 4, 5, 8, 6, 7
	//    l     r  和が7までrをずらす
	//    <----->  長さ3
	while (r < $2 and $1 + $3[r] <= ${4:K}) {
		$1 += $3[r++];
	}
	${5:ans} += r - l;
}
endsnippet
snippet algo_range_zeta "累積和" b
// =========================
// 累積和   左からi個ぶんの和   S_i = Σ A_0〜A_i-1
// Σ[l, r) = S[r] - S[l]
vector<${1:long long}> ${2:S}(${3:N} + 1);
for (int ${4:i} = 0; $4 < $3; ++$4) {
	$2[$4 + 1] = $2[$4] + ${5:A}[$4];
	// 0-1, 2-3, .... 2項差の累積和
	// $2[$4 + 1] = $2[$4]; if ($4 & 1) $2[$4 + 1] += $5[$4] - $5[$4 - 1];
}
endsnippet
snippet algo_range_zeta_rev "反転累積和" b
// =========================
// 反転累積和   Aiから右全部の和   R_i = Σ A_n-i〜A_last
vector<${1:long long}> ${2:R}(${3:N} + 1);
for (int ${4:i} = $3 - 1; $4 >= 0; --$4) {
	$2[$4] = $2[$4 + 1] + ${5:A}[$4];
	// 2項差の累積和(右端から) ..., N-4 - N-3, N-2 - N-1
	// $2[$4] = $2[$4 + 1]; if ($4 & 1) $2[$4] += $5[$4 + 1] - $5[$4];
}
// =========================
// 両端累積和の合成法: Σ 左からAi-1まで + Σ Aiから右全部 = S[i] + R[i]
//       Ai番目を無視: Σ 左からAi-1まで + Σ Ai+1から右全部 = S[i] + R[i+1]
endsnippet
snippet algo_range_zeta_2D "2次元累積和" b
// =========================
// 2次元ゼータ変換
vector<vector<${1:long long}>> ${2:S}(${3:H} + 1, vector<$1>(${4:W} + 1));
// まず横向きに足す     1 1 1 1  →  1 2 3 4
//                      1 1 1 1  →  1 2 3 4
for (int i = 0; i < $3; ++i) {
	for (int j = 0; j < $4; ++j) {
		$2[i + 1][j + 1] = $2[i + 1][j] + ${5:A}[i][j];
	}
}
// 次に縦向きに足す     1 2 3 4  ↓   1 2 3 4
//                      1 2 3 4  ↓   2 4 6 8
for (int i = 0; i < $3; ++i) {
	for (int j = 0; j < $4; ++j) {
		$2[i + 1][j + 1] += $2[i][j + 1];
	}
}
// 包除  o o    x x    x o       x x       x o
//       o x  = x x  - x o     - o o     + o o
// from(s, t) to(x, y)
//           S[y][x] - S[y][s] - S[t][x] + S[t][s]
endsnippet
snippet algo_range_moebius "メビウス変換" b
// =========================
// メビウス変換
vector<${1:int}> ${2:D}(${3:N-1});
for (int i = 0; i < $3; ++i) {
	$2[i] = ${4:A}[i + 1] - $4[i];
}
endsnippet
snippet algo_range_imos "imos" b
// =========================
// imos
// 0 0 0 0 0 0 0 0 0        末端が配列外なら、操作不要
//   |<-------->|    区間+1
// 0 |1 0 0 0 0 0 |-1 0
// 0 |1 1 1 1 1 1 |0 0   ←after zeta
// add [l, r) = add A[l] , rev A[r]
${3:++}${1:A}[${2:l}];
if ($4 < ${6:N}) ${5:--}$1[${4:r+1}];
endsnippet
snippet algo_range_imos_2D "2d imos" b
// =========================
// 2次元imos
// A+1  A | -1              末端が配列外なら、操作不要
// A    A |
// -1￣￣ +1    包除     then zeta
// from(s, t) to(x, y)面への加算
// add G[t][s], rev G[t][x + 1], rev G[y + 1][s], add G[y + 1][x + 1]
endsnippet

# =========================================================
# Sequence
# =========================================================
snippet algo_seq_merge "merge" b
// =========================
// ${1:A}を${2:B}にマージテク
// amortized O(logN)
// {1, 3, 4}  ->  {2}
//        {}  ,   {1, 2, 3, 4}
if ($1.size() > $2.size()) swap($1, $2);
for (auto &&v : $1) $2.${3:insert}(v);
$1.clear();
endsnippet
snippet algo_seq_zip "座標圧縮" b
// =========================
// 座標圧縮 O(NlogN)
vector<${1:long long}> ${2:cvt} = ${3:target};
// sort重複削除
sort($2.begin(), $2.end());
$2.erase(unique($2.begin(), $2.end()), $2.end());
// 元配列でにぶたんした、idxに変換する(圧縮)
for (auto &v : $3) v = lower_bound($2.begin(), $2.end(), v) - $2.begin();
// 重複削除後の種類数
int ${4:sz} = $2.size();
endsnippet
snippet algo_seq_inv "転倒数" b
// =========================
// 転倒数 O(NlogN)
// 右に倒れるA_i > A_j (i < j)の回数
vector<${1:long long}> ${2:cvt} = ${3:A};
// 座標圧縮
sort($2.begin(), $2.end());
$2.erase(unique($2.begin(), $2.end()), $2.end());
for (auto &v : $3) v = lower_bound($2.begin(), $2.end(), v) - $2.begin();
// 圧縮後の種類数
int ${5:sz} = $2.size();
// 追加しながらFenwick Treeの右側を足し上げる
vector<int> ${6:fwk}($5 + 1);
${7:long long} ${8:inv} = 0; // 転倒数
int ${9:R} = $5 - 1; // 座標圧縮したため最大要素 = サイズ-1
for (int i = 0; i < ${10:N}; ++i) {
	// 全区間
	for (int f = $9 + 1; f; f -= f & -f) $8 += $6[f];
	// 今の数以下の個数を引く
	// 今より左側の数列で、今の数「より大きいもの」の個数を数える
	for (int f = $3[i] + 1; f; f -= f & -f) $8 -= $6[f];
	// 今の数をカウント+1
	for (int f = $3[i] + 1; f <= $5; f += f & -f) ++$6[f];
}
endsnippet

# =========================================================
# Fenwick
# =========================================================
snippet algo_fwk "Fenwick Tree" b
// =========================
// Fenwick Tree O(logN)
// 1-indexedなので注意する
vector<${1:int}> ${2:fwk}(${3:sz+1});
endsnippet
snippet algo_fwk_build "fwk build" b
// =========================
// Fenwick Treeを配列$4でビルドする
for (int i = 1, f = i + (i & -i); i <= ${1:N}; ++i, f = i + (i & -i)) {
	${2:fwk}[i] ${3:+}= ${4:A}[i - 1];
	if (f <= $1) $2[f] $3= $2[i];
}
endsnippet
snippet algo_fwk_act "fwk act" b
// =========================
// Fenwick Tree 1点更新
for (int ${1:f} = ${2:1-idx}; $1 <= ${3:fwk-size}; $1 += $1 & -$1) ${4:fwk}[$1] ${5:+}= ${6:act_value};
endsnippet
snippet algo_fwk_get "fwk get" b
// =========================
// Fenwick Tree 区間取得  結果を$3に値を入れる
for (int ${1:f} = ${2:1-idx}; $1; $1 -= $1 & -$1) ${3:ans} ${4:+}= ${5:fwk}[$1];
endsnippet

# =========================================================
# BFS
# =========================================================
snippet algo_bfs "bfs" b
// =========================
// 単一始点BFS O(N+M)
queue<int> q;
vector<int> dis(${1:N}, -1);
// 始点をセット
q.push(${2:0});
dis[$2] = 0;
//            0
//        ↙︎ ↙︎ ↓
//     1   1  1     ポテンシャルのイメージ
//   ↙︎   ↙︎ ↓  ↓ ↘︎
// 2   2   2  2  2
while (!q.empty()) {
	int v = q.front();
	q.pop();
	// 連結頂点へ
	for (auto &&nv : ${3:G}[v]) {
		// 初訪問のみ
		if (dis[nv] == -1) {
			// 距離+1
			dis[nv] = dis[v] + 1;
			q.push(nv);
		}
	}
}
endsnippet
snippet algo_bfs_multi_start "bfs multi start" b
// =========================
// 複数始点BFS O(N+M)
queue<int> q;
vector<int> dis(${1:N}, -1);
// 複数の始点をセットする
for (int i = 0; i < ${2:K}; ++i) {
	q.push(${3:C[i]});
	dis[$3] = 0;
}
//            0   0   ポテンシャルのイメージ
//        ↙︎ ↙︎ ↓ ↙︎ ↓ ↘︎
//     1   1  1   1  1
//   ↙︎   ↙︎ ↓  ↓ ↘︎ ↓  ↓
// 2   2   2  2  2   2
while (!q.empty()) {
	int v = q.front();
	q.pop();
	// 連結頂点へ
	for (auto &&nv : ${4:G}[v]) {
		// 初訪問のみ
		if (dis[nv] == -1) {
			// 距離+1
			dis[nv] = dis[v] + 1;
			q.push(nv);
		}
	}
}
endsnippet
snippet algo_bfs_grid "bfs grid" b
// =========================
// 単一始点グリッドBFS O(N+M)
queue<pair<int, int>> q;
// 始点の座標
q.push({${1:sy}, ${2:sx}});
vector<vector<int>> dis(${3:H}, vector<int>(${4:W}, -1));
// 始点は距離0
dis[$1][$2] = 0;
while (!q.empty()) {
	// 今の点の座標
	auto [py, px] = q.front();
	q.pop();
	// 4方グリッドへすすむ
	for (int i = 0; i < 4; ++i) {
		int y = py + dy[i], x = px + dx[i];
		//
		// 領域外なら無視
		if (y < 0 or x < 0 or $3 <= y or $4 <= x) continue;
		//
		// 初訪問かつ、行けるマスであれば
		if (dis[y][x] == -1 and cango(${5:G}[y][x])) {
			// 距離+1
			dis[y][x] = dis[py][px] + 1;
			q.push({y, x});
		}
	}
}
endsnippet

# =========================================================
# DFS
# =========================================================
snippet algo_dfs "dfs" b
// =========================
// DFS O(N+M)
//         o
//       ↙︎↗︎  ↘︎
//      o      A
//   ↙︎↗︎ ↘︎↖︎   行 ↘︎ ↖︎ 帰
//  o    o        B
//
// 行きがけ: A→Bに来たあと。 今の頂点=引数v=B
// 帰りがけ: B→Aに戻る前。今の頂点=引数v=B
vector<bool> seen(${1:N}, false);
auto dfs = [&](auto &f, int v) -> void {
	// 行きがけ
	seen[v] = true;
	for (auto &&nv : ${2:G}[v]) {
		if (seen[nv]) continue;
		f(f, nv);
	}
	// 帰りがけ
};
dfs(dfs, ${3:0});
endsnippet
snippet algo_dfs_tree "dfs tree" b
// =========================
// 木の深さDFS O(N+M)     depth
//         o           ---- 0
//       ↙︎↗︎  ↘︎
//      o      A       ---- 1
//   ↙︎↗︎ ↘︎↖︎   行 ↘︎ ↖︎ 帰
//  o    o        B    ---- 2
//
// 行きがけ: A→Bに来たあと。 今の頂点=引数v=B
// 帰りがけ: B→Aに戻る前。今の頂点=引数v=B
vector<int> depth(N);
auto dfs = [&](auto &f, int v, int p, int d) -> void {
	// 行きがけ
	depth[v] = d;
	for (int nv : ${1:G}[v]) {
		if (nv == p) continue; // 親へ戻らない
		f(f, nv, v, d + 1);
	}
	// 帰りがけ
};
dfs(dfs, ${2:root}, -1, 0); // 親なし
endsnippet

# =========================================================
# DP
# =========================================================
snippet algo_dp "dp" b
// =========================
// 成果物の時間順な状態管理
// i番目の行での${1:M}個の状態
// 0 0 0 0 0
//   ↘︎ ↓
// X X ? X X
${2:vector<int>} ${3:def}($1+1, ${4:INF});
auto dp = $3, nx = dp; // 今行をdp、次行をnx
algo_dp_ini
endsnippet
snippet algo_dp_ini "dp ini" b
// =========================
// 状態0での コスト | 通り数
dp[${1:0}] = ${2:0};
algo_dp_for
endsnippet
snippet algo_dp_for "dp for" b
// =========================
// 縦向きにループ
// ↓ | 0 0 0 0 0
// ↓ |   ↘︎ ↓
// ↓ | X X ? X X
for (int i = 0; i < ${1:N}; ++i, swap(dp, nx)) {
	// 今行を次行に遷移し、行を埋める
	// - 選ばない: dp    緩和、通り数
	// - 必ず選ぶ: def   初期化する
	nx = ${2:dp def};
	// 漸化式部分
	${3}
}
// 最終行はdp
endsnippet
snippet algo_dp_add "dp add" b
// =========================
// dp_j  dp_$1
//     ↘︎  ↓    加算
// nx_j  nx_$1
nx[${1:j + 1}] += dp[${2:j}];
endsnippet
snippet algo_dp_chdp "chdp knapsack" b
// =========================
// dp_from   dp (nx=dpで緩和済み)
//    +cost ↘︎  ↓
//          nx_to
nx[${3:to}] = ${1:min}(nx[$3], dp[${2:from}] + ${4:cost});
endsnippet
snippet algo_dp_seg "dp seg" b
// =========================
SegTree<${1:Mmin}<${2:long long}>> ${3:dp}(${4:区間長} + 1);
$3.set(${5:0}, ${6:初期コスト});
endsnippet
snippet algo_dp_chdp_seg "chdp seg" b
// =========================
// | dp_l  dp_l+1  ... dp_r-1 | dp_r  ...
//      ↘︎ ↘︎ ↓ ↓ ↙︎ ↙︎  区間取得+cost
//         dp_to   と緩和
${1:dp}.set(${4:to}, ${2:min}($1[$4], $1.get(${3:from l, r}) + ${5:cost}));
endsnippet

# TODO 遷移式メインに修正中

snippet algo_dp_knapsack_alt "dp knapsack alt" b
// TODO これ理解したら汎用化したいね
int ${1:V} = ${2:1e5};
vector<vector<${3:int}>> dp(${4:N} + 1, vector<$3>($1 + 1, inf<$3>));
dp[0][0] = 0;
for (int i = 0; i < $4; ++i) {
	for (int j = 0; j <= $1; ++j) {
		dp[i + 1][j] = min(dp[i + 1][j], dp[i][j]);
		if (v[i] <= j) {
			dp[i + 1][j] = min(dp[i + 1][j], dp[i][j - ${5:v}[i]] + ${6:w}[i]);
		}
	}
}
$3 ans = 0;
for (int i = 0; i <= $1; ++i) {
	if (dp[$4][i] <= ${7:W}) {
		ans = max(ans, i);
	}
}
cout << ans << endl;
endsnippet

snippet algo_dp_lcs "dp lcs" b
// WIP これは長さだけ。本体を求めるものもある
// LCS
int ${3:s} = ${1:S}.size(), ${4:t} = ${2:T}.size();
vector<vector<int>> dp($3 + 1, vector<int>($4 + 1, 0));
for (int i = 0; i < $3; ++i) {
	for (int j = 0; j < $4; ++j) {
		dp[i + 1][j + 1] = max(
			{dp[i][j + 1], dp[i + 1][j], dp[i][j] + ($1[i] == $2[j])});
	}
}
cout << dp[$3][$4] << endl;
endsnippet
snippet algo_dp_lis "dp lis" b
// WIP
// LIS
endsnippet
snippet algo_dp_order "dp order" b
// WIP
// 桁DP
endsnippet
snippet algo_dp_range "dp range" b
// WIP
// 区間DP
endsnippet
snippet algo_dp_bit "dp bit" b
// WIP
// bit集合DP
endsnippet
snippet algo_dp_tree "dp tree" b
// TODO
// 頂点vの部分木を対象とした木DP
vector<${1:long long}> dp(${2:N}, ${3:0});
auto dfs = [&](auto &f, int v, int par = -1) -> void {
	if (${4:tree}[v].size() == 1) {
		dp[v] = 0;
		return;
	}
	$1 tmp = 0;
	for (auto &&[from, to, cost, id] : $4[v]) {
		if (to == par) continue;
		f(f, to, from);
		tmp = ${5:max}(tmp, dp[to] + cost);
	}
	dp[v] = tmp;
};
dfs(dfs, N);
cout << dp[N - 1] << endl;
endsnippet
snippet algo_dp_rerooting "dp rerooting" b
// WIP
// 全方位木DP
endsnippet
snippet algo_dp_doubling "doubling" b
// =========================
// ダブリング
long long log = 1;
while ((1ll << log) <= K) log++;
// =========================
// dp[i][j] := 2^i 回で行くところ、j種類
vector<vector<long long>> dp(log, vector<long long>(${1:N}));
for (int i = 0; i < N; ++i) {
	dp[0][i] = ${2:A}[i];
}
// =========================
// 前計算 ~2回次への遷移~
//   j dp0  dp1  dp2  ...  dp_last
// i
// 0             dp[i][j] 1個次があるので
// 1       dp[i][j] ↲  ここに行きたい
// ...
// ◽️1回次(普通のDP)の遷移は
//       次行[j] = 今行[j]
//    dp[i + 1][j] = dp[i][j]
// dp[i][j] は2^iで行った時の何種類目か、なので
// ◽️2回次は
//     2回次[j] = 今行[ 1回次のj ]
//   dp[i + 1][j] = dp[i][ dp[i][j] ]
// =========================
for (int i = 0; i < log - 1; ++i) {
	for (int j = 0; j < N; j++) {
		// 漸化式
		// choose
		dp[i + 1][j] = dp[i][dp[i][j]];
		// dp[i + 1][j] = dp[i][j] + dp[i][(j + dp[i][j]) % N];
	}
}
// =========================
// クエリ
long long ans = 0;
for (int i = 0; K > 0; ++i) {
	// choose
	if (K & 1) ans = dp[i][ans];
	// if (K & 1) ans += dp[i][ans % N];
	K >>= 1;
}
cout << ans << endl;
endsnippet

