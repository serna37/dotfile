#*cpp.algorithm.snippets*        Version 1.0
#==============================================================================
#CONTENTS                                                 *cpp.algorithm*
#
#    Brute Force .................... |brute force|
#    Binary Search  ................. |binary search|
#    Range .......................... |sequence range algorithm|
#    Sequence ....................... |sequence, others algorithm|
#    FenwickTree .................... |fenwick tree|
#    SegmentTree .................... |segment tree|
#    UnionFind ...................... |Disjoint-Set Union|
#    BFS ............................ |BFS, grid|
#    DFS ............................ |DFS, tree|
#    Graph .......................... |Graph|
#    DP ............................. |DP transition|
#
#==============================================================================

# =========================================================
# Brute Force
# =========================================================
snippet algo_brute_permutation "順列全探索" b
sort(${1:A}.begin(), $1.end());
do {
	${2}
} while (next_permutation($1.begin(), $1.end()));
endsnippet
snippet algo_brute_permutation_dfs_seq "DFS重複順列列挙" b
// 広義単調増加の組み合わせは N + M - 1 C M
// $4 ~ $5 までの数で要素数${1:N}の数列を順列全探索 単調増加でN<13程度
vector<int> ${2:perm}($1);
auto ${3:dfs} = [&](auto &f, int mi, int mx, int last = 0) -> void {
	if (last == $1) {
		// ベースケース 前まで$1-1個作、今=$1で終了
		${6:some}
		return;
	}
	for (int i = mi; i <= mx; ++i) {
		$2[last] = i;
		// 狭義単調増加 1 2 3 4 5
		// mi = i + 1;
		// 広義単調増加 1 1 2 3 4 被りok
		// mi = i;
		f(f, mi, mx, last + 1);
	}
};
$3($3, ${4:1}, ${5:M});
endsnippet
snippet algo_brute_bit_loop "bit全探索" b
for (${1:long long} ${2:bit} = 0; $2 < (${3:1ll} << ${4:N}); ++$2) {
	${5:long long} tmp = 0;
	for (int k = 0; k < $4; ++k) {
		// k番目を使うかどうか
		if ($2 & ($3 << k)) {
			tmp |= ${6:A}[k];
		}
	}
}
endsnippet
snippet algo_brute_bit_loop_2 "bit全探索 2重" b
for (int bit = 0; bit < (1 << ${1:H}); ++bit) {
	for (int bit2 = 0; bit2 < (1 << ${2:W}); ++bit2) {
		vector<int> ${3:h}, ${4:w};
		for (int k = 0; k < $1; ++k) {
			// $1側の
			// k番目を使う場合、この配列にidx入れてる
			if (bit & (1 << k)) $3.push_back(k);
		}
		//
		for (int k = 0; k < $2; ++k) {
			// $2側の
			// k番目を使う場合、この配列にidx入れてる
			if (bit2 & (1 << k)) $4.push_back(k);
		}
		//
		// h = {0, 1} 行目と
		// w = {0} 列目が選ばれている
	}
}
endsnippet
snippet algo_brute_bit_n_order "K進法N桁全探索" b
// bit全探索 非再帰 重複順列列挙 O($2^$1) N < 10程度
// ${1:N}桁 ${2:K}進数
vector<int> bit($1, 0);
// bit = {0,0,0}, {0,0,1}, {0,1,0}, {0,1,1} ...
while (1) {
	// bit = {1,1,0} を左から見るループ
	for (int i = 0; i < $1; ++i) {
		int tmp = bit[i]; // i桁目の数字（$2進法）
	}
	// インクリメント
	int order = $1 - 1, stop = 0;
	while (1) {
		++bit[order]; // 下1桁目から増やす
		if (bit[order] < $2) break; // くりあげ終了
		// 最大桁が溢れたら全体whileを終了
		if (order == 0) {
			stop = 1;
			break; 
		}
		// 繰り上げるので今の桁は0、次の桁に行く
		bit[order--] = 0;
	}
	if (stop) break;
}
endsnippet
# TODO bit演算系としてまとめ直したい
snippet algo_brute_bit_on_all_pattern "bit on all pattern" b
for (long long i = ${1:N}; i > 0; i = (i - 1) & $1) {
	cout << $1 - i << endl;
}
cout << $1 << endl;
endsnippet

# =========================================================
# Binary Search
# =========================================================
snippet algo_bisearch "整数二分探索" b
// 整数にぶたん O(logN)
auto ${1:test} = [&](${2:long long} x) -> bool {
	// oになる条件を記述
	// x x x o o o o
	//       ↑ここを求める
	${3:return x >= K}
};
$2 ${4:L} = 0, ${5:R} = 1, ${6:MID} = 0;
while (!$1($5)) $5 <<= 1; // 指数探索
while (abs($5 - $4) > 1) {
	$6 = $4 + ($5 - $4) / 2;
	($1($6) ? $5 : $4) = $6;
}
cout << $5 << endl;
endsnippet
snippet algo_bisearch_real_numbers "実数二分探索" b
// 実数にぶたん O(logN)
// doubleは桁数表現11bitを除き、52bit程度の精度
auto ${1:test} = [&](${2:double} x) -> bool {
	// oになる条件を記述
	// x x x o o o o
	//       ↑ここを求める
	${3:return x >= K}
};
$2 ${4:L} = 0, ${5:R} = 1, ${6:MID} = 0;
while (!$1($5)) $5 *= 2; // 指数探索
auto ABS = [&]() { return abs($5 - $4) > EPS; };
auto REL = [&]() { return abs($5 - $4) / max($5, $4) > EPS; };
while (ABS() and REL()) {
	$6 = $4 + ($5 - $4) / 2;
	($1($6) ? $5 : $4) = $6;
}
cout << $5 << endl;
endsnippet
snippet algo_bisearch_vec_ika_upper "以下の個数" b
// $3のうち、$4以下の個数  =  $4より大きい最左のidx
${1:int} ${2:cnt} = upper_bound(${3:A}.begin(), $3.end(), ${4:x}) - $3.begin();
endsnippet
snippet algo_bisearch_vec_sita_lower "より下の個数" b
// $3のうち、$4より下の個数  =  $4以上最左のidx
${1:int} ${2:cnt} = lower_bound(${3:A}.begin(), $3.end(), ${4:x}) - $3.begin();
endsnippet
snippet algo_bisearch_vec_izyou "以上の個数" b
// $3のうち、$4以上の個数
${1:int} ${2:cnt} = ${3:A}.end() - lower_bound($3.begin(), $3.end(), ${4:x});
endsnippet
snippet algo_bisearch_vec_ue "より上の個数" b
// $3のうち、$4より大きい個数
${1:int} ${2:cnt} = ${3:A}.end() - upper_bound($3.begin(), $3.end(), ${4:x});
endsnippet
snippet algo_bisearch_set_ika "0, lim]" b
// $2以下の最右
auto itr = ${1:st}.upper_bound(${2:A});
if (itr == $1.begin()) continue;
int val = *--itr;
endsnippet
snippet algo_bisearch_set_sita "0, lim)" b
// $2より下の最右
auto itr = ${1:st}.lower_bound(${2:A});
if (itr == $1.begin()) continue;
int val = *--itr;
endsnippet
snippet algo_bisearch_set_izyou "[lim, N" b
// $2以上の最左
auto itr = ${1:st}.lower_bound(${2:A});
if (itr == $1.end()) continue;
int val = *itr;
endsnippet
snippet algo_bisearch_set_ue "(lim, N" b
// $2より大きい最左
auto itr = ${1:st}.upper_bound(${2:A});
if (itr == $1.end()) continue;
int val = *itr;
endsnippet

# =========================================================
# Range
# =========================================================
snippet algo_range_syakutori "尺取法" b
// 尺取法 O(N)
// 連続の和が$4以下である、最大長を求める
// 1. lを固定し、できるだけrを増やす
// 2. 区間をひとつ右に。和の区間から左端が抜ける
// 3. 区間の個数はr-l個
for (int l = 0, r = 0, ${1:sum} = 0; l < ${2:N}; $1 -= ${3:A}[l++]) {
	// 2, 3, 1, 4, 5, 8, 6, 7
	//    l     r  和が7までrをずらす
	//    <----->  長さ3
	while (r < $2 and $1 + $3[r] <= ${4:K}) {
		$1 += $3[r++];
	}
	${5:ans} += r - l;
}
endsnippet
snippet algo_range_zeta "累積和" b
vector<${1:long long}> ${2:S}(${3:N} + 1); // Σ(0, i-1)
for (int ${4:i} = 0; $4 < $3; ++$4) {
	$2[$4 + 1] = $2[$4] + ${5:A}[$4];
}
// Σ[l, r) = S[r] - S[l]
endsnippet
snippet algo_range_zeta_diff2 "二項差の累積和" b
vector<${1:long long}> ${2:S}(${3:N} + 1); // Σ(0, i-1)
for (int ${4:i} = 0; $4 < $3; ++$4) {
	$2[$4 + 1] = $2[$4];
	if ($4 & 1) $2[$4 + 1] += abs(${5:A}[$4] - $5[$4 - 1]);
}
// Σ[l, r) = S[r] - S[l]
endsnippet
snippet algo_range_zeta_rev "反転累積和" b
vector<${1:long long}> ${2:R}(${3:N} + 1); // Aiから右全部
for (int ${4:i} = $3 - 1; $4 >= 0; --$4) {
	$2[$4] = $2[$4 + 1] + ${5:A}[$4];
}
// Σ(0, i-1) + Σ(i, last) = S[i] + R[i]
endsnippet
snippet algo_range_zeta_rev_diff2 "二項差の反転累積和" b
vector<${1:long long}> ${2:R}(${3:N} + 1); // Aiから右全部
for (int ${4:i} = $3 - 1; $4 >= 0; --$4) {
	$2[$4] = $2[$4 + 1];
	if ($4 & 1) $2[$4] += abs(${5:A}[$4 + 1] - $5[$4]);
}
// Σ(0, i-1) + Σ(i, last) = S[i] + R[i]
endsnippet
snippet algo_range_zeta_2D "2次元累積和" b
vector<vector<${1:long long}>> ${2:S}(${3:H} + 1, vector<$1>(${4:W} + 1));
// 横向き
for (int i = 0; i < $3; ++i) {
	for (int j = 0; j < $4; ++j) {
		$2[i + 1][j + 1] = $2[i + 1][j] + ${5:A}[i][j];
	}
}
// 縦向き
for (int i = 0; i < $3; ++i) {
	for (int j = 0; j < $4; ++j) {
		$2[i + 1][j + 1] += $2[i][j + 1];
	}
}
// 包除
// from(s, t) to(x, y) S[y][x] - S[y][s] - S[t][x] + S[t][s]
endsnippet
snippet algo_range_moebius "メビウス変換" b
vector<${1:int}> ${2:D}(${3:N-1});
for (int i = 0; i < $3; ++i) {
	$2[i] = ${4:A}[i + 1] - $4[i];
}
endsnippet
snippet algo_range_imos "imos" b
// 末端が配列外なら、操作不要
// 加算[l, r) = 加算A[l], 逆算A[r]
${3:++}${1:A}[${2:l}];
if ($4 < ${6:N}) ${5:--}$1[${4:r+1}];
endsnippet
snippet algo_range_imos_2D "2d imos" b
// 2次元imos
// A+1  A | -1  末端が配列外なら、操作不要
// A    A |
// -1￣￣ +1    包除
// from(s, t) to(x, y)面への加算
// add G[t][s], rev G[t][x + 1], rev G[y + 1][s], add G[y + 1][x + 1]
endsnippet

# =========================================================
# Sequence
# =========================================================
snippet algo_seq_merge "merge" b
// ${1:A}を${2:B}にマージテク
if ($1.size() > $2.size()) swap($1, $2);
for (auto &&v : $1) $2.${3:insert}(v);
$1.clear();
endsnippet
snippet algo_seq_merge_map "merge map" b
// ${1:mp[a]}を${2:mp[b]}にマージテク
if ($1.size() > $2.size()) swap($1, $2);
for (auto &&[k, v] : $1) $2[k] += v;
$1.clear();
endsnippet
snippet algo_seq_zip "座標圧縮" b
vector<${1:long long}> ${2:cvt} = ${3:target};
sort($2.begin(), $2.end());
$2.erase(unique($2.begin(), $2.end()), $2.end());
for (auto &v : $3) v = lower_bound($2.begin(), $2.end(), v) - $2.begin();
// 重複削除後の種類数
int ${4:sz} = $2.size();
endsnippet
snippet algo_seq_inv "転倒数" b
// 右に倒れるA_i > A_j (i < j)の回数
vector<${1:long long}> ${2:cvt} = ${3:A};
sort($2.begin(), $2.end());
$2.erase(unique($2.begin(), $2.end()), $2.end());
for (auto &v : $3) v = lower_bound($2.begin(), $2.end(), v) - $2.begin();
// 圧縮後の種類数
int ${5:sz} = $2.size();
vector<int> ${6:fwk}($5 + 1); // 追加しながらFenwickの右側和
${7:long long} ${8:inv} = 0; // 転倒数
int ${9:R} = $5 - 1; // 座標圧縮したため最大要素 = サイズ-1
for (int i = 0; i < ${10:N}; ++i) {
	for (int f = $9 + 1; f; f -= f & -f) $8 += $6[f];
	for (int f = $3[i] + 1; f; f -= f & -f) $8 -= $6[f];
	for (int f = $3[i] + 1; f <= $5; f += f & -f) ++$6[f];
}
endsnippet

# =========================================================
# FenwickTree
# =========================================================
snippet algo_fenwick_tree "Fenwick Tree" b
int sz = ${1:N}; // 葉のサイズ
vector<${2:int}> ${3:fwk}(sz + 1); // 1-indexed
$2 tot = 0; // 合計
endsnippet
snippet algo_fenwick_tree_build "fwk build" b
for (int i = 1, f = i + (i & -i); i <= ${1:N}; ++i, f = i + (i & -i)) {
	${2:fwk}[i] ${3:+}= ${4:A}[i - 1], tot $3= $4[i - 1];
	if (f <= $1) $2[f] $3= $2[i];
}
endsnippet
snippet algo_fenwick_tree_act "fwk act" b
for (int ${1:f} = ${2:1-idx}; $1 <= sz; $1 += $1 & -$1) ${3:fwk}[$1] ${4:+}= ${5:act_value}, tot $4= $5;
endsnippet
snippet algo_fenwick_tree_prod "fwk prod" b
for (int ${1:f} = ${2:1-idx}; $1; $1 -= $1 & -$1) ${3:ans} ${4:+}= ${5:fwk}[$1];
endsnippet

# =========================================================
# SegmentTree
# =========================================================
# FIXME セグ木結局ALLだけでいいかも？
snippet algo_segment_tree "Segment Tree" b
int sz = ${1:N}; // 葉のサイズ
using Mono = ${2:int}; // モノイド型
Mono e = ${3:INF}; // 単位元
auto op = [](Mono x, Mono y) -> Mono { return ${4:min}(x, y); }; // 二項演算
vector<Mono> ${5:seg}(sz << 1, e);
endsnippet
snippet algo_segment_tree_build "seg build" b
for (int i = 0; i < ${1:N}; ++i) ${2:seg}[i + sz] = ${3:A}[i];
for (int i = $1 - 1; i >= 0; --i) $2[i] = op($2[i << 1], $2[i << 1 | 1]);
endsnippet
snippet algo_segment_tree_act "seg act" b
auto act = [&](int p, const Mono &x) {
	${1:seg}[p += sz] = x; // 代入の場合
	// p += sz, $1[p] = op($1[p], x); // 作用の場合
	while (p >>= 1) $1[p] = op($1[p << 1], $1[p << 1 | 1]);
};
endsnippet
snippet algo_segment_tree_prod "seg prod" b
auto prod = [&](int l, int r) {
	Mono L = e, R = e;
	for (l += sz, r += sz; l < r; l >>= 1, r >>= 1) {
		if (l & 1) L = op(L, ${1:seg}[l++]);
		if (r & 1) R = op(${1:seg}[--r], R);
	}
	return op(L, R);
};
endsnippet
snippet algo_segment_tree_ALL "seg ALL" b
int sz = ${1:N}; // 葉のサイズ
using Mono = ${2:int}; // モノイド型
Mono e = ${3:INF}; // 単位元
auto op = [](Mono x, Mono y) -> Mono { return ${4:min}(x, y); }; // 二項演算
vector<Mono> ${5:seg}(sz << 1, e);
// =====================================
// セグ木をビルドする
auto build = [&]() {
	for (int i = 0; i < $1; ++i) $5[i + sz] = ${6:A}[i];
	for (int i = $1 - 1; i >= 0; --i) $5[i] = op($5[i << 1], $5[i << 1 | 1]);
};
build(); // ビルド実行
// セグ木 1点更新
auto act = [&](int p, const Mono &x) {
	$5[p += sz] = x; // 代入の場合
	// p += sz, $5[p] = op($5[p], x); // 作用の場合
	while (p >>= 1) $5[p] = op($5[p << 1], $5[p << 1 | 1]);
};
// セグ木 区間取得
auto prod = [&](int l, int r) {
	Mono L = e, R = e;
	for (l += sz, r += sz; l < r; l >>= 1, r >>= 1) {
		if (l & 1) L = op(L, $5[l++]);
		if (r & 1) R = op($5[--r], R);
	}
	return op(L, R);
};
endsnippet

# =========================================================
# UnionFind
# =========================================================
snippet algo_union_find "union find" b
vector<int> ${1:p}(${2:N}); // $1[x]でx所属グループの代表値
vector<vector<int>> ${3:g}($2); // グループ本体
for (int i = 0; i < $2; ++i) $1[i] = i, $3[i].push_back(i);
endsnippet

# FIXME UnionFind mergeを関数にした方がいいかな？
snippet algo_union_find_merge "union find merge" b
int ${4:X} = ${3:p}[${1:a}], ${5:Y} = $3[${2:b}]; // 代表値に変換
if ($4 == $5) continue;
if (${6:g}[$4].size() > $6[$5].size()) swap($4, $5); // マージテク
for (auto &&v : $6[$4]) $6[$5].push_back(v), $3[v] = $5;
$6[$4].clear();
endsnippet

# =========================================================
# BFS
# =========================================================
snippet algo_bfs "bfs" b
// 複数始点BFS
queue<int> q;
vector<int> dis(${1:N}, -1); // dis[v] := 始点からvまでの距離
for (int i = 0; i < 1; ++i) {
	q.push(${2:0}); // 始点を複数セット
	dis[$2] = 0;
}
while (!q.empty()) {
	int v = q.front();
	q.pop();
	for (auto &&nv : ${3:G}[v]) {
		// 隣接点へ
		if (dis[nv] == -1) {
			dis[nv] = dis[v] + 1;
			q.push(nv);
		}
	}
}
endsnippet
snippet algo_bfs_grid "bfs grid" b
queue<pair<int, int>> q;
vector<vector<int>> dis(${1:H}, vector<int>(${2:W}, -1));
q.push({${3:sy}, ${4:sx}});
dis[$3][$4] = 0;
string alw = "${5:.SG}";
auto cango = [&](char a) { return alw.find(a) != string::npos; };
while (!q.empty()) {
	auto [py, px] = q.front();
	q.pop();
	for (int i = 0; i < 4; ++i) {
		int y = py + dy[i], x = px + dx[i];
		if (y < 0 or x < 0 or $1 <= y or $2 <= x) continue;
		if (dis[y][x] == -1 and cango(${6:G}[y][x])) {
			dis[y][x] = dis[py][px] + 1;
			q.push({y, x});
		}
	}
}
endsnippet

# =========================================================
# DFS
# =========================================================
snippet algo_dfs_graph "dfs graph" b
// DFS O(N+M)
//         o
//       ↙︎↗︎  ↘︎
//      o      A
//   ↙︎↗︎ ↘︎↖︎   行 ↘︎ ↖︎ 帰
//  o    o        B
//
// 行きがけ: A→Bに来たあと。 今の頂点=引数v=B
// 帰りがけ: B→Aに戻る前。今の頂点=引数v=B
vector<bool> seen(${1:N}, false);
auto dfs = [&](auto &f, int v) -> void {
	// 行きがけ
	seen[v] = true;
	for (auto &&nv : ${2:G}[v]) {
		if (seen[nv]) continue;
		f(f, nv);
	}
	// 帰りがけ
};
dfs(dfs, ${3:0});
endsnippet
snippet algo_dfs_tree "dfs tree" b
// 木の深さDFS O(N+M)     depth
//         o           ---- 0
//       ↙︎↗︎  ↘︎
//      o      A       ---- 1
//   ↙︎↗︎ ↘︎↖︎   行 ↘︎ ↖︎ 帰
//  o    o        B    ---- 2
//
// 行きがけ: A→Bに来たあと。 今の頂点=引数v=B
// 帰りがけ: B→Aに戻る前。今の頂点=引数v=B
vector<int> depth(N);
auto dfs = [&](auto &f, int v, int p, int d) -> void {
	// 行きがけ
	depth[v] = d;
	for (int nv : ${1:G}[v]) {
		if (nv == p) continue; // 親へ戻らない
		f(f, nv, v, d + 1);
	}
	// 帰りがけ
};
dfs(dfs, ${2:root}, -1, 0); // 親なし
endsnippet
# TODO ここから
snippet algo_dfs_lambda "lambda recursive dfs" b
auto ${1:dfs} = [${2:&}](auto &f, ${3:const int &a}) -> ${4:void} {
	// ベースケース
	${5}
	// 行きがけ + 再帰
	// o o             o o
	//     o o     o o
	//         o o ←base
	// f(f, )
	// 帰りがけ
};
endsnippet
snippet algo_dfs_memo_rec "lambda recursive memo" b
map<long long , long long >mp;
auto ${1:rec} = [${2:&}](auto &f, ${3:const int &a}) -> ${4:long long} {
	// ベースケース
	${5}
	// if (a == 0) return 0;
	// メモにあれば使用
	if (mp.count(a)) return mp[a];
	// なければ再帰しつつメモに追加
	return mp[a] = f(f, );
};
endsnippet

# XXX 試験的に追加
# =========================================================
# Graph
# =========================================================
snippet algo_graph_dijkstra "dijkstra" b
// 逆向きpriority_queue コスト型: $1
using ${8:PQrv} = pair<${1:long long}, int>;
priority_queue<$8, vector<$8>, greater<$8>> ${3:dijkq};
// コスト、始点: $2をセット
$3.emplace(0, ${2:0});

// 始点への距離をセット
vector<$1> ${4:dis}(${5:N}, INF); // dis[v] := 始点からvへの最短コスト
$4[$2] = 0;

// dijkstra
vector<int> ${6:route}($5, -1); // 復元用の経路保持
while (!$3.empty()) {
	auto [dv, v] = $3.top();
	$3.pop();
	if (dv > $4[v]) continue;
	for (auto &&[to, cost] : ${7:G}[v]) {
		$1 c = dv + cost;
		if ($4[to] > c) {
			$4[to] = c;
			$3.emplace($4[to], to);
			$6[to] = v;
		}
	}
}

// pth[v] := vからゴールまで辿る頂点
vector<int> pth = {$5 - 1}; // ゴールをセット
while ($6[pth.back()] != -1) pth.emplace_back($6[pth.back()]);
reverse(pth.begin(), pth.end());

cout << $4[$5 - 1] << endl;
endsnippet

# =========================================================
# DP
# =========================================================
snippet algo_dp "dp" b
${2:vector<int>} ${3:def}(${1:M}+1, ${4:INF});
auto dp = $3, nx = dp;
algo_dp_ini
endsnippet
snippet algo_dp_ini "dp ini" b
// =========================
dp[${1:0}] = ${2:0};
algo_dp_for
endsnippet
snippet algo_dp_for "dp for" b
// =========================
for (int i = 0; i < ${1:N}; ++i, swap(dp, nx)) {
	// - 選ばない: dp    緩和、通り数
	// - 必ず選ぶ: def   初期化する
	nx = ${2:dp def};
	// 漸化式
	${3}
}
// 最終行はdp
endsnippet
snippet algo_dp_add "dp add" b
// =========================
// dp_j  dp_j+1
//     ↘︎  ↓    加算
// nx_j  nx_j+1
nx[${1:j + 1}] += dp[${2:j}];
endsnippet
snippet algo_dp_chdp "chdp knapsack" b
// =========================
// dp_from    dp_to (nx=dpで緩和済み)
//   + cost ↘︎  ↓
//           nx_to
nx[${3:to}] = ${1:min}(nx[$3], dp[${2:from}] + ${4:cost});
endsnippet

# TODO 遷移式メインに修正中

snippet algo_dp_knapsack_alt "dp knapsack alt" b
// TODO これ理解したら汎用化したいね
int ${1:V} = ${2:1e5};
vector<vector<${3:int}>> dp(${4:N} + 1, vector<$3>($1 + 1, inf<$3>));
dp[0][0] = 0;
for (int i = 0; i < $4; ++i) {
	for (int j = 0; j <= $1; ++j) {
		dp[i + 1][j] = min(dp[i + 1][j], dp[i][j]);
		if (v[i] <= j) {
			dp[i + 1][j] = min(dp[i + 1][j], dp[i][j - ${5:v}[i]] + ${6:w}[i]);
		}
	}
}
$3 ans = 0;
for (int i = 0; i <= $1; ++i) {
	if (dp[$4][i] <= ${7:W}) {
		ans = max(ans, i);
	}
}
cout << ans << endl;
endsnippet

snippet algo_dp_lcs "dp lcs" b
// WIP これは長さだけ。本体を求めるものもある
// LCS
int ${3:s} = ${1:S}.size(), ${4:t} = ${2:T}.size();
vector<vector<int>> dp($3 + 1, vector<int>($4 + 1, 0));
for (int i = 0; i < $3; ++i) {
	for (int j = 0; j < $4; ++j) {
		dp[i + 1][j + 1] = max(
			{dp[i][j + 1], dp[i + 1][j], dp[i][j] + ($1[i] == $2[j])});
	}
}
cout << dp[$3][$4] << endl;
endsnippet
snippet algo_dp_lis "dp lis" b
// WIP
// LIS
endsnippet
snippet algo_dp_order "dp order" b
// WIP
// 桁DP
endsnippet
snippet algo_dp_range "dp range" b
// WIP
// 区間DP
endsnippet
snippet algo_dp_bit "dp bit" b
// WIP
// bit集合DP
endsnippet
snippet algo_dp_tree "dp tree" b
// TODO
// 頂点vの部分木を対象とした木DP
vector<${1:long long}> dp(${2:N}, ${3:0});
auto dfs = [&](auto &f, int v, int par = -1) -> void {
	if (${4:tree}[v].size() == 1) {
		dp[v] = 0;
		return;
	}
	$1 tmp = 0;
	for (auto &&[from, to, cost, id] : $4[v]) {
		if (to == par) continue;
		f(f, to, from);
		tmp = ${5:max}(tmp, dp[to] + cost);
	}
	dp[v] = tmp;
};
dfs(dfs, N);
cout << dp[N - 1] << endl;
endsnippet
snippet algo_dp_rerooting "dp rerooting" b
// WIP
// 全方位木DP
endsnippet
snippet algo_dp_doubling "doubling" b
// ダブリング
long long log = 1;
while ((1ll << log) <= K) log++;
// =========================
// dp[i][j] := 2^i 回で行くところ、j種類
vector<vector<long long>> dp(log, vector<long long>(${1:N}));
for (int i = 0; i < N; ++i) {
	dp[0][i] = ${2:A}[i];
}
// =========================
// 前計算 ~2回次への遷移~
//   j dp0  dp1  dp2  ...  dp_last
// i
// 0             dp[i][j] 1個次があるので
// 1       dp[i][j] ↲  ここに行きたい
// ...
// ◽️1回次(普通のDP)の遷移は
//       次行[j] = 今行[j]
//    dp[i + 1][j] = dp[i][j]
// dp[i][j] は2^iで行った時の何種類目か、なので
// ◽️2回次は
//     2回次[j] = 今行[ 1回次のj ]
//   dp[i + 1][j] = dp[i][ dp[i][j] ]
// =========================
for (int i = 0; i < log - 1; ++i) {
	for (int j = 0; j < N; j++) {
		// 漸化式
		// choose
		dp[i + 1][j] = dp[i][dp[i][j]];
		// dp[i + 1][j] = dp[i][j] + dp[i][(j + dp[i][j]) % N];
	}
}
// =========================
// クエリ
long long ans = 0;
for (int i = 0; K > 0; ++i) {
	// choose
	if (K & 1) ans = dp[i][ans];
	// if (K & 1) ans += dp[i][ans % N];
	K >>= 1;
}
cout << ans << endl;
endsnippet

