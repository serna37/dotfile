# =========================================================
# template
# =========================================================
snippet wwww "template header" b
#include <bits/stdc++.h>
using namespace std;
${1}
endsnippet
snippet main "main function" b
int main() {
	${1}
}
endsnippet

# =========================================================
# const
# =========================================================
snippet const_inf "infinity" b
template <class T> constexpr T inf = 0;
template <> constexpr int inf<int> = 1e9;
template <> constexpr long long inf<long long> = 1e18;
endsnippet
snippet const_inf_i "infinity int" b
constexpr int INF = 1e9;
endsnippet
snippet const_inf_l "infinity long long" b
constexpr long long INF = 1e18;
endsnippet
snippet const_MOD_998244353 "mod" b
constexpr long long MOD = 998244353;
endsnippet
snippet const_MOD_100000007 "mod" b
constexpr long long MOD = 1000000007;
endsnippet
snippet const_grid_dydx4 "grid connector" b
const vector<int> dx = {0, 1, 0, -1};
const vector<int> dy = {1, 0, -1, 0};
endsnippet
snippet const_grid_dydx8 "grid connector" b
const vector<int> dx = {0, 1, 0, -1, 1, -1, 1, -1};
const vector<int> dy = {1, 0, -1, 0, 1, 1, -1, -1};
endsnippet
snippet const_PI "PI" b
const double PI = acos(-1);
endsnippet

# =========================================================
# input
# =========================================================
snippet in_1 "in 1" b
${1:int} ${2:N};
cin >> $2;
endsnippet
snippet in_1_vec "in 1 + vec" b
${1:int} ${2:N};
cin >> $2;
vector<${3:int}> ${4:A}($2);
for (int i = 0; i < $2; i++) cin >> $4[i];
endsnippet
snippet in_2 "in 2" b
${1:int} ${2:N}, ${3:M};
cin >> $2 >> $3;
endsnippet
snippet in_3 "in 3" b
${1:int} ${2:N}, ${3:M}, ${4:K};
cin >> $2 >> $3 >> $4;
endsnippet
snippet in_4 "in 4" b
${1:int} ${2:N}, ${3:M}, ${4:K}, ${5:S};
cin >> $2 >> $3 >> $4 >> $5;
endsnippet
snippet vec_in_1 "vec in 1" b
vector<${1:int}> ${2:A}(${3:N});
for (int i = 0; i < $3; i++) cin >> $2[i];
endsnippet
snippet vec_in_2 "vec in 2" b
vector<${1:int}> ${2:A}(${4:N}), ${3:B}($4);
for (int i = 0; i < $4; i++) cin >> $2[i] >> $3[i];
endsnippet
snippet vec_in_3 "vec in 3" b
vector<${1:int}> ${2:A}(${5:N}), ${3:B}($5), ${4:C}($5);
for (int i = 0; i < $5; i++) cin >> $2[i] >> $3[i] >> $4[i];
endsnippet
snippet grid_in "grid in" b
vector<vector<${1:char}>> ${2:G}(${3:H}, vector<$1>(${4:W}));
for (int i = 0; i < $3; i++) {
	for (int j = 0; j < $4; j++) {
		cin >> $2[i][j];
	}
}
endsnippet
snippet graph_in "graph in" b
vector<vector<${1:int}>> ${2:G}(${3:N});
for (int i = 0; i < ${4:M}; i++) {
	$1 ${5:A}, ${6:B};
	cin >> $5 >> $6;
	$5--, $6--;
	$2[$5].push_back($6);
	$2[$6].push_back($5);
}
endsnippet
snippet graph_cost_in "graph cost in" b
Graph<${1:long long}> ${2:G}(${3:N});
for (int i = 0; i < ${4:M}; i++) {
	int from, to;
	cin >> from >> to;
	from--, to--;
	$1 cost;
	cin >> cost;
	$2.add(from, to);
	$2.add(to, from);
	$2.add(from, to, cost, i);
	$2.add(to, from, cost, i);
}
endsnippet
snippet edges_cin "edges in" b
Graph<${1:long long}> ${2:G}(${3:N});
vector<Edge<$1>> edges;
for (int i = 0; i < ${4:M}; i++) {
	int from, to;
	cin >> from >> to;
	from--, to--;
	$1 cost;
	cin >> cost;
	$2.add(from, to, cost, i);
	$2.add(to, from, cost, i);
	edges.push_back({from, to, cost, i});
}
endsnippet

# =========================================================
# output
# =========================================================
snippet cout "cout" b
cout << ${1:ans} << endl;
endsnippet
snippet cout "cout" iw
cout << ${1}
endsnippet
snippet cout_no_yes "yes no" b
cout << (${1:condition} ? "${2:Yes}" : "${3:No}") << endl;
endsnippet
snippet cout_vec "cout vector" b
for (int ${1:i} = 0; $1 < ${2:N}; $1++) {
	if ($1) cout << " ";
	cout << ${3:A}[$1];
}
cout << endl;
endsnippet
snippet cout_all "cout all" b
int i = 0;
for (auto &&v : ${1:st}) {
	if (i++) cout << " ";
	cout << v;
}
cout << endl;
endsnippet
snippet cout_grid "cout grid" b
for (int ${1:i} = 0; $1 < ${2:N}; $1++) {
	for (int ${3:j} = 0; $3 < ${4:M}; $3++) {
		if ($3) cout << " ";
		cout << ${5:G}[$1][$3];
	}
	cout << endl;
}
endsnippet
snippet cout_map "cout map" b
for (auto &&[k, v] : ${1:mp}) cout << "[" << k << "," << v << "] ";
cout << endl;
endsnippet
snippet cout_endl "endl" b
cout << endl;
endsnippet
snippet cout_fixed_setprecision "fixed setprecision" b
cout << fixed << setprecision(${1:20});
endsnippet

# =========================================================
# function
# =========================================================
snippet func "function" b
${1:void} ${2:func}(${3:int n}) {
	${4}
}
endsnippet
snippet lambda "function lambda" b
auto ${1:cal} = [${2:&}](${3:const int &a}) -> ${4:void} {
	${5}
};
endsnippet
snippet lambda_re "function recursive" b
auto ${1:cal} = [${2:&}](auto &f, ${3:const int &a}) -> ${4:void} {
	${5}
	f(f, );
};
endsnippet

# =========================================================
# for while if
# =========================================================
snippet for "for" b
for (${1} ; ${2} ; ${3}) {
	${4}
}
endsnippet
snippet fori "fori" b
for (int ${1:i} = ${2:0}; $1 <${3:N}; $1++) {
	${4}
}
endsnippet
snippet fori2 "fori 2" b
for (int ${1:i} = ${2:0}; $1 <${3:H}; $1++) {
	for (int ${4:j} = ${5:0}; $4 <${6:W}; $4++) {
		${7}
	}
}
endsnippet
snippet fori_re "fori reverse" b
for (int ${1:i} = ${2:N-1}; $1 >=${3:0}; $1--) {
	${4}
}
endsnippet
snippet forl "forl" b
for (long long ${1:i} = ${2:0}; $1 <${3:N}; $1++) {
	${4}
}
endsnippet
snippet foril_sqrt "foril sqrt" b
for (${1:long long} ${2:i} = ${3:0}; $2 * $2 <= ${4:N}; $2++) {
	${5}
}
endsnippet
snippet forv "for vector set" b
for (${1:auto} &&${2:v} : ${3:st}) {
	${4}
}
endsnippet
snippet form "for map" b
for (auto &&[${1:k}, ${2:v}] : ${3:mp}) {
	${4}
}
endsnippet
snippet while "while" b
while (${1:Q--}) {
	${2}
}
endsnippet
snippet filter "continue" b
if (${1:filter}) ${2:continue};
endsnippet
snippet if "if" b
if (${1}) ${2};
endsnippet

# =========================================================
# STL
# =========================================================
snippet chmax "max" b
${1:ans} = max($1, ${2:tmp});
endsnippet
snippet chmin "min" b
${1:ans} = min($1, ${2:tmp});
endsnippet
snippet all "iterator all" bi
${1:A}.begin(), $1.end()
endsnippet
snippet all_rev "iterator reverse" bi
${1:A}.rbegin(), $1.rend()
endsnippet
snippet unique "unique" b
sort(${1:A}.begin(), $1.end());
$1.erase(unique($1.begin(), $1.end()), $1.end());
endsnippet
snippet transform "transform" b
std::transform(${1:str}.begin(), $1.end(), $1.begin(), ::${2:tolower});
endsnippet

# prepare for completion priority
snippet sort "sort" b
sort(${1});
endsnippet
snippet swap "swap" b
swap(${1} , ${2});
endsnippet
snippet reverse "reverse" b
reverse(${1});
endsnippet
snippet iota "iota" b
iota(${1});
endsnippet
snippet npos "npos" iw
string::npos
endsnippet
snippet __builtin_ctz "__builtin_ctz" bi
__builtin_ctz(${1})
endsnippet
snippet __builtin_popcount "__builtin_popcount" bi
__builtin_popcount(${1})
endsnippet
snippet __builtin_popcountll "__builtin_popcountll" bi
__builtin_popcountll(${1})
endsnippet

# =========================================================
# util
# =========================================================
snippet size "size" b
int ${1:N} = ${2:S}.size();
endsnippet
snippet size "size" iw
(int)${1:S}.size()
endsnippet
snippet ifinf "ifinf" iw
(${1:ans} == ${2:INF} ? ${3:-1} : $1)
endsnippet
snippet mod "mod" b
${1:ans} %= MOD;
endsnippet
snippet ceil "ceil" iw
(${1:A} + ${2:B} - 1) / $2
endsnippet
snippet ceil2 "ceil2" iw
(${1:A} + 1) / 2
endsnippet
snippet divceil "divceil" b
// 負もok
auto divCeil = []<class T>(T a, T b) -> T {
	return a / b + (((a ^ b) > 0 and a % b != 0) ? 1 : 0);
};
endsnippet
snippet divfloor "divfloor" b
// 負もok
auto divFloor = []<class T>(T a, T b) -> T {
	return a / b - (((a ^ b) < 0 and a % b != 0) ? 1 : 0);
};
endsnippet
snippet islower "is lower" b
auto islow = [](char c) -> bool { return islower(c) != 0; };
endsnippet
snippet isupper "is upper" b
auto isupp = [](char c) -> bool { return isupper(c) != 0; };
endsnippet
snippet split "split" b
auto split = [](string s, char c) -> vector<string> {
	vector<string> S;
	string t;
	for (char v : s) {
		if (v == c) {
			if (!t.empty()) S.push_back(t);
			t.clear();
		} else {
			t += v;
		}
	}
	if (!t.empty()) S.push_back(t);
	return S;
};
endsnippet

# =========================================================
# type
# =========================================================
snippet ll "long long" bi
long long 
endsnippet
snippet dou "double" bi
double 
endsnippet

snippet vec "vec" bi
vector<${1:int}>
endsnippet
snippet vec2 "vec2" bi
vector<vector<${1:int}>> ${2:dp}(${3:N+1}, vector<$1>(${4:M+1}, ${5:0}));
endsnippet
snippet st "set" bi
set<${1:int}>
endsnippet
snippet mul "mul" bi
multiset<${1:int}>
endsnippet
snippet mp "map" bi
map<${1:int}, ${2:int}>
endsnippet
snippet uno "unordered_map" bi
unordered_map<${1:int}, ${2:int}>
endsnippet

snippet pp "pair" bi
pair<${1:int}, ${2:int}>
endsnippet
snippet tu "tuple" bi
tuple<${1}>
endsnippet

snippet sta "stack" bi
stack<${1:int}>
endsnippet
snippet qu "queue" bi
queue<${1:int}>
endsnippet
snippet pri "priority_queue" bi
// emptyなとき0になるようpadding
priority_queue<${1:int}> ${2:q};
for (int i = 0; i < ${3:N}; i++) $2.push(${4:0});
endsnippet
snippet pril "pril" bi
priority_queue<${1:int}, vector<$1>, greater<$1>>
endsnippet
snippet deq "deque" bi
deque<${1:char}>
endsnippet

