# =========================================================
# template
# =========================================================
snippet wwww "template header" b
#include <bits/stdc++.h>
using namespace std;
${1}
endsnippet
snippet main "main function" b
int main() {
	${1}
}
endsnippet

# =========================================================
# macro
# =========================================================
snippet w_macro "macro" b
#define $$ (get<0>(forward_as_tuple(_args...)))
#define $(idx) (get<(idx)>(forward_as_tuple(_args...)))
#define lambda(...) ([&](auto &&..._args) { return (__VA_ARGS__); })
endsnippet
snippet w_lambda "lambda" b
auto ${1:func} = lambda(${2:$$});
endsnippet

# =========================================================
# for while
# =========================================================
snippet for "for" b
for (${1} ; ${2} ; ${3}) {
	${4}
}
endsnippet
snippet fori "fori" b
for (int ${1:i} = ${2:0}; $1 <${3:N}; $1++) {
	${4}
}
endsnippet
snippet fori2 "fori 2" b
for (int ${1:i} = ${2:0}; $1 <${3:H}; $1++) {
	for (int ${4:j} = ${5:0}; $4 <${6:W}; $4++) {
		${7}
	}
}
endsnippet
snippet fori_re "fori reverse" b
for (int ${1:i} = ${2:N-1}; $1 >=${3:0}; $1--) {
	${4}
}
endsnippet
snippet forl "forl" b
for (long long ${1:i} = ${2:0}; $1 <${3:N}; $1++) {
	${4}
}
endsnippet
snippet foril_sqrt "foril sqrt" b
for (${1:long long} ${2:i} = ${3:0}; $2 * $2 <= ${4:N}; $2++) {
	${5}
}
endsnippet
snippet forv "for vector" b
for (${1:auto} &&${2:v} : ${3:A}) {
	${4}
}
endsnippet
snippet while "while" b
while (${1:Q--}) {
	${2}
}
endsnippet

# =========================================================
# function
# =========================================================
snippet func "function" b
${1:void} ${2:func}(${3:int n}) {
	${4}
}
endsnippet
snippet lambda "function lambda" b
auto ${1:cal} = [${2:&}](${3:const int &a}) -> ${4:void} {
	${5}
};
endsnippet
snippet lambda_re "function recursive" b
auto ${1:cal} = [${2:&}](auto &f, ${3:const int &a}) -> ${4:void} {
	${5}
	f(f, );
};
endsnippet

# =========================================================
# STL
# =========================================================
snippet chmax "max" b
${1:ans} = max($1, ${2:tmp});
endsnippet
snippet chmin "min" b
${1:ans} = min($1, ${2:tmp});
endsnippet
snippet all "iterator all" bi
${1:A}.begin(), $1.end()
endsnippet
snippet all_rev "iterator reverse" bi
${1:A}.rbegin(), $1.rend()
endsnippet
snippet unique "unique" b
sort(${1:A}.begin(), $1.end());
$1.erase(unique($1.begin(), $1.end()), $1.end());
endsnippet
snippet transform "transform" b
std::transform(${1:str}.begin(), $1.end(), $1.begin(), ::${2:tolower});
endsnippet

# prepare for completion priority
snippet sort "sort" b
sort(${1});
endsnippet
snippet swap "swap" b
swap(${1} , ${2});
endsnippet
snippet reverse "reverse" b
reverse(${1});
endsnippet
snippet iota "iota" b
iota(${1});
endsnippet
snippet __builtin_ctz "__builtin_ctz" bi
__builtin_ctz(${1})
endsnippet
snippet __builtin_popcount "__builtin_popcount" bi
__builtin_popcount(${1})
endsnippet
snippet __builtin_popcountll "__builtin_popcountll" bi
__builtin_popcountll(${1})
endsnippet

# =========================================================
# util
# =========================================================
snippet size "size" b
int ${1:N} = ${2:S}.size();
endsnippet
snippet size "size" iw
(int)${1:S}.size()
endsnippet
snippet debug_var "debug var" b
cout << "${1:A}: " << $1 << endl; // TODO debug
endsnippet
snippet debug_loop "debug for" b
cout << "debug_${1:A}:";            // TODO debug
for (auto v : $1) cout << " " << v; // TODO debug
cout << endl;                       // TODO debug
endsnippet
snippet islower "is lower" b
auto islow = [](char c) -> bool { return islower(c) != 0; };
endsnippet
snippet isupper "is upper" b
auto isupp = [](char c) -> bool { return isupper(c) != 0; };
endsnippet
snippet ceil "ceil" iw
(${1:A} + ${2:B} - 1) / $2
endsnippet
snippet ceil2 "ceil2" iw
(${1:A} + 1) / 2
endsnippet
snippet divceil "divceil" b
// 負もok
auto divCeil = []<class T>(T a, T b) -> T {
	return a / b + (((a ^ b) > 0 and a % b != 0) ? 1 : 0);
};
endsnippet
snippet divfloor "divfloor" b
// 負もok
auto divFloor = []<class T>(T a, T b) -> T {
	return a / b - (((a ^ b) < 0 and a % b != 0) ? 1 : 0);
};
endsnippet
snippet split "split" b
auto split = [](string s, char c) -> vector<string> {
	vector<string> S;
	string t;
	for (char v : s) {
		if (v == c) {
			if (!t.empty()) S.push_back(t);
			t.clear();
		} else {
			t += v;
		}
	}
	if (!t.empty()) S.push_back(t);
	return S;
};
endsnippet

# =========================================================
# type
# =========================================================
snippet ll "long long" bi
long long 
endsnippet
snippet dou "double" bi
double 
endsnippet

snippet vec "vec" bi
vector<${1:int}>
endsnippet
snippet st "set" bi
set<${1:int}>
endsnippet
snippet mul "mul" bi
multiset<${1:int}>
endsnippet
snippet mp "map" bi
map<${1:int}, ${2:int}>
endsnippet
snippet uno "unordered_map" bi
unordered_map<${1:int}, ${2:int}>
endsnippet

snippet pp "pair" bi
pair<${1:int}, ${2:int}>
endsnippet
snippet tu "tuple" bi
tuple<${1}>
endsnippet

snippet sta "stack" bi
stack<${1:int}>
endsnippet
snippet qu "queue" bi
queue<${1:int}>
endsnippet
snippet pri "priority_queue" bi
// emptyなとき0になるようpadding
priority_queue<${1:int}> ${2:q};
for (int i = 0; i < ${3:N}; i++) $2.push(${4:0});
endsnippet
snippet pril "pril" bi
priority_queue<${1:int}, vector<$1>, greater<$1>>
endsnippet
snippet deq "deque" bi
deque<${1:char}>
endsnippet

