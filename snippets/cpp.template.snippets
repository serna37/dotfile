#*cpp.template.snippets*        Version 1.0
#==============================================================================
#CONTENTS                                                 *cpp.template*
#
#    template ....................... |basic template|
#    type ........................... |long long, vector, ...|
#    function ....................... |function|
#    for ............................ |for|
#    while .......................... |while|
#    if ............................. |if, ternary operator|
#    STL ............................ |chmax, sort, ...|
#    wrap ........................... |wrap function for C++|
#
#==============================================================================

# =========================================================
# template
# =========================================================
snippet template "template header" b
#include <bits/stdc++.h>
using namespace std;${1}
int main() {${2}
}
endsnippet
snippet fastio "fast io" b
#include <bits/stdc++.h>
using namespace std;
#define endl "\n"${1}
int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);${2}
}
endsnippet

# =========================================================
# type
# =========================================================
snippet ll "long long" bi
long long 
endsnippet
snippet dou "double" bi
double 
endsnippet

snippet vec "vec" bi
vector<${1:int}>
endsnippet
snippet vec2 "vec2" bi
vector<vector<${1:int}>> ${2:G}(${3:N}, vector<$1>(${4:M}, ${5:0}));
endsnippet
snippet st "set" bi
set<${1:int}>
endsnippet
snippet mul "mul" bi
multiset<${1:int}>
endsnippet
snippet sterase "st erase" b
${1:st}.erase($1.find(${2:val}));
endsnippet
snippet mp "map" bi
map<${1:int}, ${2:int}>
endsnippet
snippet mperase "mp erase" b
if (--${1:mp}[${2:key}] == 0) $1.erase($2);
endsnippet
snippet uno "unordered_map" bi
unordered_map<${1:int}, ${2:int}>
endsnippet

snippet pp "pair" bi
pair<${1:int}, ${2:int}>
endsnippet
snippet tu "tuple" bi
tuple<${1}>
endsnippet
snippet get "get" bi
get<${1}>(${2})
endsnippet

snippet sta "stack" bi
stack<${1:int}>
endsnippet
snippet qu "queue" bi
queue<${1:int}>
endsnippet
snippet pri "priority_queue" bi
priority_queue<${1:int}> ${2:q};
endsnippet
snippet pri_pad "priority_queue pad" bi
// emptyなとき$4になるようpadding
priority_queue<${1:int}> ${2:q};
for (int i = 0; i < ${3:N}; ++i) $2.push(${4:0});
endsnippet
snippet pril "pril" bi
priority_queue<${1:int}, vector<$1>, greater<$1>>
endsnippet
snippet deq "deque" bi
deque<${1:char}>
endsnippet

# =========================================================
# function
# =========================================================
snippet func "function" b
${1:void} ${2:func}(${3:int n}) {
	${4}
}
endsnippet
snippet lambda "function lambda" b
auto ${1:cal} = [${2:&}](${3:const int &a}) -> ${4:void} {
	${5}
};
endsnippet
snippet lambda_re "lambda recursive" b
auto ${1:cal} = [${2:&}](auto &f, ${3:const int &a}) -> ${4:void} {
	${5:base_case}
	// memo
	// no memo
	f(f, );
};
endsnippet

# =========================================================
# for
# =========================================================
snippet for "for" b
for (${1} ; ${2} ; ${3}) {
	${4}
}
endsnippet
snippet fori "for i" b
for (int ${1:i} = ${2:0}; $1 <${3:N}; ++$1) {
	${4}
}
endsnippet
snippet forj "for j" b
for (int ${1:j} = ${2:0}; $1 <${3:N}; ++$1) {
	${4}
}
endsnippet
snippet fork "for k" b
for (int ${1:k} = ${2:0}; $1 <${3:N}; ++$1) {
	${4}
}
endsnippet
snippet forij2 "for ij double loop" b
for (int ${1:i} = ${2:0}; $1 <${3:H}; ++$1) {
	for (int ${4:j} = ${5:0}; $4 <${6:W}; ++$4) {
		${7}
	}
}
endsnippet
snippet fori_re "for i reverse" b
for (int ${1:i} = ${2:N-1}; $1 >=${3:0}; --$1) {
	${4}
}
endsnippet
snippet fori_ll "for i long long" b
for (long long ${1:i} = ${2:0}; $1 <${3:N}; ++$1) {
	${4}
}
endsnippet
snippet fori_range "for i range loop" b
for (int ${1:i} = ${2:0}; $1 <${3:N} - ${4:M} + 1; ++$1) {
	${5}
}
endsnippet
snippet fori_sqrt "for i sqrt" b
for (${1:long long} ${2:i} = ${3:0}; ${4:$2*$2} <= ${5:N}; ++$2) {
	${6}
}
endsnippet
snippet forv "for vector set" b
for (${1:auto} &&${2:v} : ${3:st}) {
	${4}
}
endsnippet
snippet form "for map" b
for (auto &&[${1:k}, ${2:v}] : ${3:mp}) {
	${4}
}
endsnippet

# =========================================================
# while
# =========================================================
snippet while "while" b
while (${1:Q--}) {
	${2}
}
endsnippet
snippet while_increment "while ++" b
while (${1:i} < ${2:N} and ${3:condition}) ++$1;
endsnippet

# =========================================================
# if
# =========================================================
snippet filter "continue" b
if (${1:filter}) ${2:continue};
endsnippet
snippet if "if" b
if ( ${1} ) {
	${2}
}${3}
endsnippet
snippet elseif "else if" i
else if ( ${1} ) {
	${2}
}${3}
endsnippet
snippet else "else" i
else {
	${1}
}
endsnippet
snippet san "ternary operator" i
( ${1:ans == 0} ? ${2:yes} : ${3:no}  )
endsnippet

# =========================================================
# STL
# =========================================================
snippet chmax "max" b
${1:ans} = max($1, ${2:tmp});
endsnippet
snippet chmin "min" b
${1:ans} = min($1, ${2:tmp});
endsnippet
snippet all "iterator all" i
${1:A}.begin(), $1.end()
endsnippet
snippet all_rev "iterator reverse" i
${1:A}.rbegin(), $1.rend()
endsnippet
snippet unique "unique" b
sort(${1:A}.begin(), $1.end());
$1.erase(unique($1.begin(), $1.end()), $1.end());
endsnippet
snippet transform "transform" b
std::transform(${1:str}.begin(), $1.end(), $1.begin(), ::${2:tolower});
endsnippet
snippet max_e "max element" i
*max_element(${1});
endsnippet
snippet min_e "min element" i
*min_element(${1});
endsnippet

# prepare for completion priority
snippet sort "sort" b
sort(${1});
endsnippet
snippet reverse "reverse" b
reverse(${1});
endsnippet
snippet iota "iota" b
iota(${1});
endsnippet
snippet swap "swap" b
swap(${1} , ${2});
endsnippet
snippet swap_left "swap left" b
if (${1:A} > ${2:B}) swap($1, $2);
endsnippet
snippet npos "npos" i
string::npos
endsnippet
snippet __builtin_ctz "__builtin_ctz" i
__builtin_ctz(${1})
endsnippet
snippet __builtin_popcount "__builtin_popcount" i
__builtin_popcount(${1})
endsnippet
snippet __builtin_popcountll "__builtin_popcountll" i
__builtin_popcountll(${1})
endsnippet

# =========================================================
# wrap
# =========================================================
snippet divceil "divceil" b
// 負の場合0側へ丸めない
auto divCeil = []<class T>(T a, T b) -> T {
	return a / b + (((a ^ b) > 0 and a % b != 0) ? 1 : 0);
};
endsnippet
snippet divfloor "divfloor" b
// 負の場合0側へ丸めない
auto divFloor = []<class T>(T a, T b) -> T {
	return a / b - (((a ^ b) < 0 and a % b != 0) ? 1 : 0);
};
endsnippet
snippet islower "is lower" b
// bool値を返すようwrap
auto islow = [](char c) -> bool { return islower(c) != 0; };
endsnippet
snippet isupper "is upper" b
// bool値を返すようwrap
auto isupp = [](char c) -> bool { return isupper(c) != 0; };
endsnippet
