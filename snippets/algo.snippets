# =========================================================
# Algorithm reduce eval
# =========================================================
snippet algo_alma "allmatch" b
${1:ok} &= ${2};
endsnippet
snippet algo_anma "anymatch" b
${1:anma} |= ${2};
endsnippet
snippet algo_sum_all "sum all" b
${1:int} ${2:sum} = 0;
for (int ${3:i} = ${4:0}; $3 <${5:N}; $3++) {
	$2 += ${6:A}[i];
}
endsnippet
snippet algo_gcd_all "gcd all" b
${1:long long} ${2:GCD} = ${3:A}[0];
for (int i = 1; i < ${4:N}; i++) {
	$2 = gcd($2, $3[i]);
}
endsnippet
snippet algo_lcm_all "lcm all" b
${1:long long} ${2:LCM} = 1;
for (int i = 0; i < ${3:N}; i++) {
	$2 = lcm($2, ${4:A}[i]);
}
endsnippet
snippet algo_ren_cnt "ren cnt" b
int ${1:ren_mx} = 0, ${2:ren} = 0;
for (int ${3:i} = 0; $3 < ${4:N}; $3++) {
	if (${5:condition}) {
		$2++;
	} else {
		$2 = 0;
	}
	$1 = max($1, $2);
}
endsnippet

# =========================================================
# Algorithm Search
# =========================================================
snippet algo_4_pattern "4" b
for (int ${1:k} = 0; $1 < 4; $1++) {
	if ($1 & 1) { // x o x o
	}
	if ($1 & 2) { // x x o o
	}
}
endsnippet
snippet algo_permu_loop "next permutation" b
do {${2}} while (next_permutation(${1:A}.begin(), $1.end()));
endsnippet
snippet algo_perm_seq_loop "permutation sequence" b
// mi ~ mx までの数で、要素数${1:N}の数列を順列全探索
vector<int> ${2:perm}($1);
auto ${3:cal} = [&](auto &f, int mi, int mx, int last = 0) -> void {
	if (last == $1) {
		// ベースケース。前周までで$1-1要素つくった、今=$1のとき終了
		${6:some}
		return;
	}
	for (int i = mi; i <= mx; i++) {
		$2[last] = i;
		// mi = i + 1; // 狭義単調増加
		// mi = i; // 広義単調増加
		f(f, mi, mx, last + 1);
	}
};
$3($3, ${4:1}, ${5:M});
endsnippet
snippet algo_bit_loop "bit loop" b
for (${1:long long} ${2:bit} = 0; $2 < (${3:1ll} << ${4:N}); $2++) {
	${5:long long} tmp = 0;
	for (int k = 0; k < $4; k++) {
		// k番目を使うか
		if ($2 & ($3 << k)) {
			tmp |= ${6:A}[k];
		}
	}
}
endsnippet
snippet algo_bit_loop_2 "bit loop" b
for (int bit = 0; bit < (1 << ${1:H}); bit++) {
	for (int bit2 = 0; bit2 < (1 << ${2:W}); bit2++) {
		vector<int> ${3:h}, ${4:w};
		for (int k = 0; k < $1; k++) {
			// k番目を使うか
			if (bit & (1 << k)) $3.push_back(k);
		}
		for (int k = 0; k < $2; k++) {
			// k番目を使うか
			if (bit2 & (1 << k)) $4.push_back(k);
		}
	}
}
endsnippet
snippet algo_bit_n_order "bit N" b
// ${1:N}桁の${2:K}進数
vector<int> bit($1, 0);
while (1) {
	for (int i = 0; i < $1; i++) {
		int tmp = bit[i]; // i桁目の数字（$2進法）
	}
	// インクリメント
	int order = $1 - 1, stop = 0;
	while (1) {
		bit[order]++;
		if (bit[order] < $2) break; // くりあげ終了
		if (order == 0) { // 最大桁が溢れた
			stop = 1;
			break; 
		}
		bit[order--] = 0; // 繰り上げて次の桁
	}
	if (stop) break;
}
endsnippet
# TODO bit演算系としてまとめ直したい
snippet algo_bit_on_all_pattern "bit on all pattern" b
for (long long i = ${1:N}; i > 0; i = (i - 1) & $1) {
	cout << $1 - i << endl;
}
cout << $1 << endl;
endsnippet
snippet algo_syakutori "syakutori" b
// lを固定
// 連続和がKまでrを増やす
// whileがfalseになるので、区間の個数はr-l個
// lを増やして繰り返す
for (int l = 0, r = 0, ${1:sum} = 0; l < ${2:N}; $1 -= ${3:A}[l++]) {
	while (r < $2 and $1 + $3[r] <= ${4:K}) $1 += $3[r++];
	${5:ans} += r - l;
}
endsnippet

# =========================================================
# Algorithm BinarySearch
# =========================================================
snippet algo_bisearch "bisearch" b
auto ${1:test} = [&](${2:long long} x) -> bool {
	${3:return x >= K}
};
$2 ${4:L} = 0, ${5:R} = 1, ${6:MID} = 0;
while (!$1($5)) $5 <<= 1; // 指数探索
while ($5 - $4 > 1) ($1($6 = $4 + ($5 - $4) / 2) ? $5 : $4) = $6;
cout << $5 << endl;
endsnippet
snippet algo_bi_ika_cnt "ika cnt" b
// 以下の個数 = より大きい最左のidx
${1:int} ${2:cnt} = upper_bound(${3:A}.begin(), $3.end(), ${4:x}) - $3.begin();
endsnippet
snippet algo_bi_sita_cnt "sita cnt" b
// より下の個数 = 以上最左のidx
${1:int} ${2:cnt} = lower_bound(${3:A}.begin(), $3.end(), ${4:x}) - $3.begin();
endsnippet
snippet algo_bi_izyou_cnt "izyou cnt" b
// 以上の個数
${1:int} ${2:cnt} = ${3:A}.end() - lower_bound($3.begin(), $3.end(), ${4:x});
endsnippet
snippet algo_bi_ue_cnt "ue cnt" b
// より大きい個数
${1:int} ${2:cnt} = ${3:A}.end() - upper_bound($3.begin(), $3.end(), ${4:x});
endsnippet
snippet algo_bi_ika_max "0, lim]" b
// 以下の最右
auto itr = ${1:st}.upper_bound(${2:A});
if (itr == $1.begin()) continue;
--itr;
endsnippet
snippet algo_bi_sita_max "0, lim)" b
// より下の最右
auto itr = ${1:st}.lower_bound(${2:A});
if (itr == $1.begin()) continue;
--itr;
endsnippet
snippet algo_bi_izyou_min "[lim, N" b
// 以上の最左
auto itr = ${1:st}.lower_bound(${2:A});
if (itr == $1.end()) continue;
endsnippet
snippet algo_bi_ue_min "(lim, N" b
// より大きい最左
auto itr = ${1:st}.upper_bound(${2:A});
if (itr == $1.end()) continue;
endsnippet

# =========================================================
# Algorithm Range
# =========================================================
snippet algo_zeta "ruisekiwa" b
vector<${1:long long}> ${2:S}(${3:N} + 1);
for (int i = 0; i < $3; i++) {
	$2[i + 1] = $2[i] + ${4:A}[i];
} // $2_i = $4_0 + ... + $4_i-1 →
endsnippet
snippet algo_zeta_rev "ruisekiwa reverse" b
vector<${1:long long}> ${2:R}(${3:N} + 1);
for (int i = $3 - 1; i >= 0; i--) {
	$2[i] = $2[i + 1] + ${4:A}[i];
} // $2_i = ← $4_n-i + ... + $4_n-1
endsnippet
snippet algo_zeta_2D "2d ruisekiwa" b
// 2次元ゼータ変換
vector<vector<${1:long long}>> ${2:S}(${3:H} + 1, vector<$1>(${4:W} + 1));
for (int i = 0; i < $3; i++) {
	for (int j = 0; j < $4; j++) {
		$2[i + 1][j + 1] = $2[i + 1][j] + ${5:A}[i][j];
	}
}
for (int i = 0; i < $3; i++) {
	for (int j = 0; j < $4; j++) {
		$2[i + 1][j + 1] += $2[i][j + 1];
	}
}
endsnippet
snippet algo_moebius "diff" b
vector<${1:int}> ${2:D}(${3:N-1});
for (int i = 0; i < $3; i++) {
	$2[i] = ${4:A}[i + 1] - $4[i];
}
endsnippet
snippet algo_imos "imos" b
// imos
${1:A}[${2:l}]${3:++};
$1[${4:r+1}]${5:--};
endsnippet

# =========================================================
# Algorithm seq
# =========================================================
snippet algo_zip "zip short" b
vector<${1:long long}> ${2:cvt} = ${3:target};
sort($2.begin(), $2.end());
$2.erase(unique($2.begin(), $2.end()), $2.end());
for (auto &v : $3) {
	v = lower_bound($2.begin(), $2.end(), v) - $2.begin();
}
int ${4:cnt} = $2.size();
endsnippet
snippet algo_fwk "fwk short" b
vector<${1:int}> ${2:fwk}(${3:N}${4:+1});
endsnippet
snippet algo_fwk_build "fwk short" b
for (int i = 1, f = i + (i & -i); i <= ${1:N}; i++, f = i + (i & -i)) {
	${2:fwk}[i] ${3:+}= ${4:A}[i - 1];
	if (f <= $1) $2[f] $3= $2[i];
}
endsnippet
snippet algo_fwk_act "fwk short" b
for (int ${1:f} = ${2:1-idx}; $1 <= ${3:N}; $1 += $1 & -$1) {
	${4:fwk}[$1] ${5:+}= ${6:act_value};
}
endsnippet
snippet algo_fwk_get "fwk short" b
for (int ${1:f} = ${2:1-idx}; $1; $1 -= $1 & -$1) {
	${3:sum} ${4:+}= ${5:fwk}[$1];
}
endsnippet
snippet algo_seq_inv "seq inv" b
vector<${1:long long}> ${2:cvt} = ${3:A};
sort($2.begin(), $2.end());
$2.erase(unique($2.begin(), $2.end()), $2.end());
for (auto &v : $3) {
	v = lower_bound($2.begin(), $2.end(), v) - $2.begin();
}
int ${5:sz} = $2.size();
vector<int> ${6:fwk}($5 + 1);
${7:long long} ${8:inv} = 0; // 右に倒れる$3_i < $3_j (i < j)な数
int ${9:R} = $5 - 1; // 座標圧縮したため最大要素 = サイズ-1
for (int i = 0; i < ${10:N}; i++) {
	for (int f = $9 + 1; f; f -= f & -f) {
		$8 += $6[f];
	}
	for (int f = $3[i] + 1; f; f -= f & -f) {
		$8 -= $6[f];
	}
	for (int f = $3[i] + 1; f <= $5; f += f & -f) {
		$6[f]++;
	}
}
endsnippet
snippet algo_merge "merge" b
// ${1:A}を${2:B}にマージ
if ($1.size() > $2.size()) swap($1, $2);
for (auto &&v : $1) $2.${3:insert}(v);
$1.clear();
endsnippet
snippet algo_swap_left "swap left" b
// ${1:A} < ${2:B} を保証する
if ($1 > $2) swap($1, $2);
endsnippet

# =========================================================
# Algorithm BFS
# =========================================================
snippet algo_bfs "bfs" b
// 単一始点BFS
queue<int> q;
vector<int> dis(${1:N}, -1);
q.push(${2:0});
dis[$2] = 0;
while (!q.empty()) {
	int v = q.front();
	q.pop();
	for (auto &&nv : ${3:G}[v]) {
		if (dis[nv] == -1) {
			dis[nv] = dis[v] + 1;
			q.push(nv);
		}
	}
}
endsnippet
snippet algo_bfs_multi_start "bfs multi start" b
// 複数始点BFS
queue<int> q;
vector<int> dis(${1:N}, -1);
for (int i = 0; i < ${2:K}; i++) {
	q.push(${3:C[i]});
	dis[$3] = 0;
}
while (!q.empty()) {
	int v = q.front();
	q.pop();
	for (auto &&nv : ${4:G}[v]) {
		if (dis[nv] == -1) {
			dis[nv] = dis[v] + 1;
			q.push(nv);
		}
	}
}
endsnippet
snippet algo_bfs_grid "bfs grid" b
// 単一始点グリッドBFS
queue<pair<int, int>> q;
q.push({${1:sy}, ${2:sx}});
vector<vector<int>> dis(${3:H}, vector<int>(${4:W}, -1));
dis[$1][$2] = 0;
while (!q.empty()) {
	auto [py, px] = q.front();
	q.pop();
	for (int i = 0; i < 4; i++) {
		int y = py + dy[i], x = px + dx[i];
		if (y < 0 or x < 0 or $3 <= y or $4 <= x) continue;
		if (dis[y][x] == -1 and cango(${5:G}[y][x])) {
			dis[y][x] = dis[py][px] + 1;
			q.push({y, x});
		}
	}
}
endsnippet
snippet algo_grid_dydx "dydx" b
int y = ${1:i}, x = ${2:j};
y += dy[${3:d}], x += dx[$3];
endsnippet
snippet algo_grid_filter "bfs grid filter" b
// 領域外
if (${1:y} < 0 or ${2:x} < 0 or ${3:row} <= $1 or ${4:col} <= $2) continue;
endsnippet
snippet algo_grid_cango "grid cango" b
// 進めるか判定
auto cango = [](const char &a) -> bool {
	string white = "${1:.SG}";
	return white.find(a) != string::npos;
};
endsnippet
snippet algo_toguro "toguro" b
int y = 0, x = 0, d = 0;
for
y += dy[d], x += dx[d];
if (y < 0 or x < 0 or ${1:row} <= y or ${2:col} <= x or G[y][x] != -1) {
	y -= dy[d], x -= dx[d]; // やっぱ戻って
	d++, d %= 4; // 方向変えて
	y += dy[d], x += dx[d]; // 進直す
}
endsnippet
snippet algo_bingo "bingo" b
vector<int> cx(${1:N}); // クロス1
iota(cx.begin(), cx.end(), 0);
vector<int> cy = cx; // クロス2
reverse(cy.begin(), cy.end());
bool c1 = true, c2 = true;
${2:int} check_val = ${3:-1};
for (int i = 0; i < $1; i++) {
	c1 &= ${4:A}[i][cx[i]] == check_val; // 左上から右下
	c2 &= $4[i][cy[i]] == check_val; // 右上から左下
	bool alma = true, alma2 = true;
	for (int j = 0; j < $1; j++) {
		alma &= $4[i][j] == check_val; // 行内でallmatch
		alma2 &= $4[j][i] == check_val; // 列内でallmatch
	}
	if (alma or alma2) {
		cout << "TODO row col allmatch" << endl;
	}
}
if (c1 or c2) {
	cout << "TODO cross allmatch" << endl;
}
endsnippet

# =========================================================
# Algorithm DFS
# =========================================================
snippet algo_dfs "dfs" b
// DFS
vector<bool> seen(${1:N}, false);
auto dfs = [&](auto &f, int v) -> void {
	// 行きがけ
	seen[v] = true;
	for (auto &&nv : ${2:G}[v]) {
		if (seen[nv]) continue;
		f(f, nv);
	}
	// 帰りがけ
};
dfs(dfs, ${3:0});
endsnippet
# TODO これいらんかなぁ？
snippet algo_dfs_tree "dfs" b
// DFS
vector<int> depth(N);
auto dfs = [&](auto &f, int v, int p, int d) -> void {
	// 行きがけ
	depth[v] = d;
	for (int nv : ${1:G}[v]) {
		if (nv == p) continue;
		f(f, nv, v, d + 1);
	}
	// 帰りがけ
};
dfs(dfs, ${2:root}, -1, 0);
endsnippet

# =========================================================
# Algorithm DP
# =========================================================
snippet algo_dp "dp" b
vector<${1:int}> ini(${2:K} + 1, ${3:0}), dp, nx;
dp = ini, dp[${4:0}] = ${5:0};
for (int i = 0; i < ${6:N}; i++) {
	nx = ${7:dp or ini};
	${8:transition 0 <= M}
	swap(dp, nx);
}
$1 ans = dp[$2];
endsnippet
snippet algo_dp_add "dp add" b
nx[${1:j + 1}] += dp[${2:j}];
endsnippet
snippet algo_dp_nap "dp knapsack" b
nx[${3:to}] = ${1:min}(nx[$3], dp[${2:from}] + ${4:cost});
endsnippet

# TODO 遷移式メインに修正中

snippet algo_dp_knapsack_alt "dp knapsack alt" b
int ${1:V} = ${2:1e5};
vector<vector<${3:int}>> dp(${4:N} + 1, vector<$3>($1 + 1, inf<$3>));
dp[0][0] = 0;
for (int i = 0; i < $4; i++) {
	for (int j = 0; j <= $1; j++) {
		dp[i + 1][j] = min(dp[i + 1][j], dp[i][j]);
		if (v[i] <= j) {
			dp[i + 1][j] = min(dp[i + 1][j], dp[i][j - ${5:v}[i]] + ${6:w}[i]);
		}
	}
}
$3 ans = 0;
for (int i = 0; i <= $1; i++) {
	if (dp[$4][i] <= ${7:W}) {
		ans = max(ans, i);
	}
}
cout << ans << endl;
endsnippet

snippet algo_dp_lcs "dp lcs" b
int ${3:s} = ${1:S}.size(), ${4:t} = ${2:T}.size();
vector<vector<int>> dp($3 + 1, vector<int>($4 + 1, 0));
for (int i = 0; i < $3; i++) {
	for (int j = 0; j < $4; j++) {
		dp[i + 1][j + 1] = max(
			{dp[i][j + 1], dp[i + 1][j], dp[i][j] + ($1[i] == $2[j])});
	}
}
cout << dp[$3][$4] << endl;
endsnippet
snippet algo_dp_lis "dp lis" b
// WIP
endsnippet
snippet algo_dp_order "dp order" b
// WIP
endsnippet
snippet algo_dp_range "dp range" b
// WIP
endsnippet
snippet algo_dp_seg "dp seg" b
SegTree<Mmin<${1:long long}>> dp(${2:N+1});
dp.set(0, 0);
for (int i = 0; i < ${3:M}; i++) {
	auto [r, l, c] = T[i];
	$1 asis = dp[r];
	$1 tobe = dp.get(l, r) + c;
	// 区間から1点へ配るDP
	dp.set(r, min(asis, tobe));
}
cout << dp[N] << endl;
endsnippet
snippet algo_dp_bit "dp bit" b
// WIP
endsnippet
snippet algo_dp_tree "dp tree" b
vector<${1:long long}> dp(${2:N}, ${3:0});
auto dfs = [&](auto &f, int v, int par = -1) -> void {
	if (${4:tree}[v].size() == 1) {
		dp[v] = 0;
		return;
	}
	$1 tmp = 0;
	for (auto &&[from, to, cost, id] : $4[v]) {
		if (to == par) continue;
		f(f, to, from);
		tmp = ${5:max}(tmp, dp[to] + cost);
	}
	dp[v] = tmp;
};
dfs(dfs, N);
cout << dp[N - 1] << endl;
endsnippet
snippet algo_dp_rerooting "dp rerooting" b
// WIP
endsnippet

# =========================================================
# Meaningful Mean
# =========================================================
snippet algo_meaningful_mean "meaningful mean" b
int N, K;
cin >> N >> K;
vector<long long> a(N), S(N + 1);
for (auto &&v : a) cin >> v;
for (int i = 0; i < N; i++) S[i + 1] = S[i] + a[i] - K;
vector<long long> cvt = S;
sort(cvt.begin(), cvt.end());
cvt.erase(unique(cvt.begin(), cvt.end()), cvt.end());
for (auto &v : S) v = lower_bound(cvt.begin(), cvt.end(), v) - cvt.begin();
long long cnt = cvt.size(), ans = 0;
vector<int> fwk(cnt + 1, 0);
for (int i = 0; i < N + 1; i++) {
	for (int f = S[i] + 1; f; f -= f & -f) ans += fwk[f];
	for (int f = S[i] + 1; f <= cnt; f += f & -f) fwk[f]++;
}
cout << ans << endl;
endsnippet
