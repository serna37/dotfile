# =========================================================
# Math
# =========================================================
snippet ww_math_order_sum_n "order sum" b
auto digitsum = []<class T>(T a, int N = 10) -> T {
	T ans = 0;
	while (a != 0) {
		ans += a % N;
		a /= N;
	}
	return ans;
};
endsnippet

snippet ww_math_divisors_list "divisors" b
auto divisors = []<class T>(T a) -> vector<T> {
	vector<T> ans;
	for (int i = 1; i * i <= a; i++) {
		if (a % i != 0) continue;
		ans.push_back(i);
		if (a / i != i) ans.push_back(a / i);
	}
	return ans;
};
endsnippet

snippet ww_math_is_prime "is prime" b
auto is_p = []<class T>(T num) -> bool {
	if (num == 2) return true;
	if (num < 2 || num % 2 == 0) return false;
	double sqrtNum = sqrt(num);
	for (T i = 3; i <= sqrtNum; i += 2) {
		if (num % i == 0) return false;
	}
	return true;
};
endsnippet

snippet ww_math_prime_fact "prime fact" b
auto p_fact = []<class T>(T N) -> map<T, int> {
	map<T, int> P;
	for (T i = 2; i * i <= N; i++) {
		while (N % i == 0) {
			P[i]++;
			N /= i;
		}
	}
	if (N > 1) P[N]++;
	return P;
};
endsnippet

snippet ww_math_eratosthenes_sieve "sieve of eratosthenes" b
auto eratosthenes = []<class T>(T N) -> vector<bool> {
	vector<bool> is_P(N + 1, true);
	is_P[0] = is_P[1] = false;
	for (T i = 2; i * i <= N; i++) {
		if (!is_P[i]) continue;
		for (T j = i * i; j <= N; j += i) is_P[j] = false;
	}
	return is_P;
};
endsnippet

snippet ww_math_mod_pow "pow mod" b
auto mod_pow = [&]<class T>(T a, T n) -> T {
	T ans = 1;
	while (n > 0) {
		if (n & 1) ans = ans * a % MOD;
		a = a * a % MOD;
		n >>= 1ll;
	}
	return ans;
};
endsnippet

snippet ww_math_mod_inverse_Fermat "inverse mod Fermat" b
auto modinv_fermat = [&](long long a) -> long long {
	return mod_pow(a, MOD - 2);
};
endsnippet

snippet ww_math_mod_factorial "factorial mod" b
vector<long long> mf;
auto modfact = [&](int x) -> long long {
	if ((int)mf.size() > x) return mf[x];
	if (mf.empty()) mf.push_back(1);
	for (int i = mf.size(); i <= x; i++) mf.push_back(mf.back() * i % MOD);
	return mf[x];
};
endsnippet

snippet ww_math_factorial "factorial" b
auto factorial = []<class T>(T N) -> T {
	T ans = 1;
	while (N > 0) ans *= N--;
	return ans;
};
endsnippet

snippet ww_math_mod_combination "combination mod" b
auto mod_combination = [&](int n, int k) -> long long {
	return modfact(n) * modinv_fermat(modfact(k)) % MOD * modinv_fermat(modfact(n - k)) % MOD;
};
endsnippet

snippet ww_math_mod_combination_Euclid "combination mod Extended Euclid" b
const int MAX = 3e5;
long long fac[MAX], finv[MAX], inv[MAX];
auto Extended_Euclid_inverse_calc = [&]() -> void {
	fac[0] = fac[1] = finv[0] = finv[1] = inv[1] = 1;
	for (int i = 2; i < MAX; i++) {
		fac[i] = fac[i - 1] * i % MOD;
		inv[i] = MOD - inv[MOD % i] * (MOD / i) % MOD;
		finv[i] = finv[i - 1] * inv[i] % MOD;
	}
};
Extended_Euclid_inverse_calc();
auto nCk = [&](int n, int k) -> long long {
	if (n < k or n < 0 or k < 0) return 0;
	return fac[n] * (finv[k] * finv[n - k] % MOD) % MOD;
};
endsnippet

snippet ww_math_fft "fft" b
namespace FFT {
using real = double;
struct C {
	real x, y;
	C() : x(0), y(0){};
	C(real x, real y) : x(x), y(y){};
	inline C operator+(const C &c) const {
		return C(x + c.x, y + c.y);
	}
	inline C operator-(const C &c) const {
		return C(x - c.x, y - c.y);
	}
	inline C operator*(const C &c) const {
		return C(x * c.x - y * c.y, x * c.y + y * c.x);
	}
	inline C conj() const {
		return C(x, -y);
	}
};
const real PI = acosl(-1);
int base = 1;
vector<C> rts = {{0, 0}, {1, 0}};
vector<int> rev = {0, 1};
void ensure_base(int nbase) {
	if (nbase <= base) return;
	rev.resize(1 << nbase);
	rts.resize(1 << nbase);
	for (int i = 0; i < (1 << nbase); i++) {
		rev[i] = (rev[i >> 1] >> 1) + ((i & 1) << (nbase - 1));
	}
	while (base < nbase) {
		real angle = PI * 2.0 / (1 << (base + 1));
		for (int i = 1 << (base - 1); i < (1 << base); i++) {
			rts[i << 1] = rts[i];
			real angle_i = angle * (2 * i + 1 - (1 << base));
			rts[(i << 1) + 1] = C(cos(angle_i), sin(angle_i));
		}
		++base;
	}
}
void fft(vector<C> &a, int n) {
	assert((n & (n - 1)) == 0);
	int zeros = __builtin_ctz(n);
	ensure_base(zeros);
	int shift = base - zeros;
	for (int i = 0; i < n; i++) {
		if (i < (rev[i] >> shift)) swap(a[i], a[rev[i] >> shift]);
	}
	for (int k = 1; k < n; k <<= 1) {
		for (int i = 0; i < n; i += 2 * k) {
			for (int j = 0; j < k; j++) {
				C z = a[i + j + k] * rts[j + k];
				a[i + j + k] = a[i + j] - z;
				a[i + j] = a[i + j] + z;
			}
		}
	}
}
} // namespace FFT
endsnippet

snippet ww_math_convolution_fft "convolution" b
template <typename R>
vector<long long> convolution_fft(const vector<R> &a, const vector<R> &b) {
	using C = FFT::C;
	int need = (int)a.size() + (int)b.size() - 1, nbase = 1;
	while ((1 << nbase) < need) ++nbase;
	FFT::ensure_base(nbase);
	int sz = 1 << nbase;
	vector<C> fa(sz);
	for (int i = 0; i < sz; i++) {
		double x = i < (int)a.size() ? a[i] : 0;
		double y = i < (int)b.size() ? b[i] : 0;
		fa[i] = C(x, y);
	}
	FFT::fft(fa, sz);
	C r(0, -0.25 / (sz >> 1)), s(0, 1), t(0.5, 0);
	for (int i = 0; i <= (sz >> 1); i++) {
		int j = (sz - i) & (sz - 1);
		C z = (fa[j] * fa[j] - (fa[i] * fa[i]).conj()) * r;
		fa[j] = (fa[i] * fa[i] - (fa[j] * fa[j]).conj()) * r;
		fa[i] = z;
	}
	for (int i = 0; i < (sz >> 1); i++) {
		C A0 = (fa[i] + fa[i + (sz >> 1)]) * t;
		C A1 = (fa[i] - fa[i + (sz >> 1)]) * t * FFT::rts[(sz >> 1) + i];
		fa[i] = A0 + A1 * s;
	}
	FFT::fft(fa, sz >> 1);
	vector<long long> ret(need);
	for (int i = 0; i < need; i++) {
		ret[i] = llround(i & 1 ? fa[i >> 1].y : fa[i >> 1].x);
	}
	return ret;
}
endsnippet
