# =========================================================
# DFS
# - XXX 再帰
# - XXX graph
# - XXX tree
# - memo
# =========================================================

snippet algo_dfs_lambda "lambda recursive dfs" b
auto ${1:dfs} = [${2:&}](auto &f, ${3:const int &a}) -> ${4:void} {
	// ベースケース
	${5}
	// 行きがけ + 再帰
	// o o             o o
	//     o o     o o
	//         o o ←base
	// f(f, )
	// 帰りがけ
};
endsnippet
snippet algo_dfs_graph "dfs graph" b
// DFS O(N+M)
//         o
//       ↙︎↗︎  ↘︎
//      o      A
//   ↙︎↗︎ ↘︎↖︎   行 ↘︎ ↖︎ 帰
//  o    o        B
//
// 行きがけ: A→Bに来たあと。 今の頂点=引数v=B
// 帰りがけ: B→Aに戻る前。今の頂点=引数v=B
vector<bool> seen(${1:N}, false);
auto dfs = [&](auto &f, int v) -> void {
	// 行きがけ
	seen[v] = true;
	for (auto &&nv : ${2:G}[v]) {
		if (seen[nv]) continue;
		f(f, nv);
	}
	// 帰りがけ
};
dfs(dfs, ${3:0});
endsnippet
snippet algo_dfs_tree "dfs tree" b
// 木の深さDFS O(N+M)     depth
//         o           ---- 0
//       ↙︎↗︎  ↘︎
//      o      A       ---- 1
//   ↙︎↗︎ ↘︎↖︎   行 ↘︎ ↖︎ 帰
//  o    o        B    ---- 2
//
// 行きがけ: A→Bに来たあと。 今の頂点=引数v=B
// 帰りがけ: B→Aに戻る前。今の頂点=引数v=B
vector<int> depth(N);
auto dfs = [&](auto &f, int v, int p, int d) -> void {
	// 行きがけ
	depth[v] = d;
	for (int nv : ${1:G}[v]) {
		if (nv == p) continue; // 親へ戻らない
		f(f, nv, v, d + 1);
	}
	// 帰りがけ
};
dfs(dfs, ${2:root}, -1, 0); // 親なし
endsnippet
snippet algo_dfs_memo_rec "lambda recursive memo" b
map<long long , long long >mp;
auto ${1:rec} = [${2:&}](auto &f, ${3:const long long &a}) -> ${4:long long} {
	// ベースケース
	${5}
	// if (a == 0) return 0;
	// メモにあれば使用
	if (mp.count(a)) return mp[a];
	// なければ再帰しつつメモに追加
	return mp[a] = f(f, );
};
endsnippet

