# =========================================================
# template
# =========================================================
snippet wwww "template header" b
#include <bits/stdc++.h>
using namespace std;
${1}
endsnippet
snippet main "main function" b
int main() {
	${1}
}
endsnippet

# =========================================================
# function
# =========================================================
snippet func "function" b
${1:void} ${2:func}(${3:int n}) {
	${4}
}
endsnippet
snippet lambda "function lambda" b
auto ${1:cal} = [${2:&}](${3:const int &a}) -> ${4:void} {
	${5}
};
endsnippet
snippet lambda_re "lambda recursive" b
auto ${1:cal} = [${2:&}](auto &f, ${3:const int &a}) -> ${4:void} {
	${5}
	f(f, );
};
endsnippet

# =========================================================
# for
# =========================================================
snippet for "for" b
for (${1} ; ${2} ; ${3}) {
	${4}
}
endsnippet
snippet fori "for i" b
for (int ${1:i} = ${2:0}; $1 <${3:N}; $1++) {
	${4}
}
endsnippet
snippet forj "for j" b
for (int ${1:j} = ${2:0}; $1 <${3:N}; $1++) {
	${4}
}
endsnippet
snippet fork "for k" b
for (int ${1:k} = ${2:0}; $1 <${3:N}; $1++) {
	${4}
}
endsnippet
snippet forij2 "for ij double loop" b
for (int ${1:i} = ${2:0}; $1 <${3:H}; $1++) {
	for (int ${4:j} = ${5:0}; $4 <${6:W}; $4++) {
		${7}
	}
}
endsnippet
snippet fori_re "for i reverse" b
for (int ${1:i} = ${2:N-1}; $1 >=${3:0}; $1--) {
	${4}
}
endsnippet
snippet fori_ll "for i long long" b
for (long long ${1:i} = ${2:0}; $1 <${3:N}; $1++) {
	${4}
}
endsnippet
snippet fori_range "for i range loop" b
for (int ${1:i} = ${2:0}; $1 <${3:N} - ${4:M} + 1; $1++) {
	${5}
}
endsnippet
snippet fori_sqrt "for i sqrt" b
for (${1:long long} ${2:i} = ${3:0}; ${4:$2*$2} <= ${5:N}; $2++) {
	${6}
}
endsnippet
snippet forv "for vector set" b
for (${1:auto} &&${2:v} : ${3:st}) {
	${4}
}
endsnippet
snippet form "for map" b
for (auto &&[${1:k}, ${2:v}] : ${3:mp}) {
	${4}
}
endsnippet

# =========================================================
# while
# =========================================================
snippet while "while" b
while (${1:Q--}) {
	${2}
}
endsnippet

# =========================================================
# if
# =========================================================
snippet filter "continue" b
if (${1:filter}) ${2:continue};
endsnippet
snippet if "if" b
if ( ${1} ) {
	${2}
}${3}
endsnippet
snippet elseif "else if" i
else if ( ${1} ) {
	${2}
}${3}
endsnippet
snippet else "else" i
else {
	${1}
}
endsnippet
snippet san "ternary operator" i
( ${1:ans == 0} ? ${2:yes} : ${3:no}  )
endsnippet

# =========================================================
# STL
# =========================================================
snippet chmax "max" b
${1:ans} = max($1, ${2:tmp});
endsnippet
snippet chmin "min" b
${1:ans} = min($1, ${2:tmp});
endsnippet
snippet all "iterator all" i
${1:A}.begin(), $1.end()
endsnippet
snippet all_rev "iterator reverse" i
${1:A}.rbegin(), $1.rend()
endsnippet
snippet unique "unique" b
sort(${1:A}.begin(), $1.end());
$1.erase(unique($1.begin(), $1.end()), $1.end());
endsnippet
snippet transform "transform" b
std::transform(${1:str}.begin(), $1.end(), $1.begin(), ::${2:tolower});
endsnippet
snippet max_e "max element" i
*max_element(${1});
endsnippet
snippet min_e "min element" i
*min_element(${1});
endsnippet

# prepare for completion priority
snippet sort "sort" b
sort(${1});
endsnippet
snippet reverse "reverse" b
reverse(${1});
endsnippet
snippet iota "iota" b
iota(${1});
endsnippet
snippet swap "swap" b
swap(${1} , ${2});
endsnippet
snippet swap_left "swap left" b
if (${1:A} > ${2:B}) swap($1, $2);
endsnippet
snippet npos "npos" i
string::npos
endsnippet
snippet __builtin_ctz "__builtin_ctz" i
__builtin_ctz(${1})
endsnippet
snippet __builtin_popcount "__builtin_popcount" i
__builtin_popcount(${1})
endsnippet
snippet __builtin_popcountll "__builtin_popcountll" i
__builtin_popcountll(${1})
endsnippet

# =========================================================
# util
# =========================================================

# shortcut define
snippet ok "ok" b
bool ok = true;
endsnippet
snippet alma "alma" b
bool alma = true;
endsnippet
snippet anma "anma" b
bool anma = false;
endsnippet
snippet size "size" b
int ${1:N} = ${2:S}.size();
endsnippet
snippet size "size" i
(int)${1:S}.size()${2}
endsnippet
snippet minus_2 "minus" b
${1:A}--, ${2:B}--;
endsnippet
snippet saninf "ternary operator inf" i
( ${1:ans} == ${2:INF} ? ${3:-1} : $1 )
endsnippet

# shortcut calculation
snippet allmatch "allmatch" b
${1:alma} &= ${2};
endsnippet
snippet anymatch "anymatch" b
${1:anma} |= ${2};
endsnippet
snippet mod "mod" b
${1:ans} %= ${2:MOD};
endsnippet
snippet mod_cal "mod" b
${1:ans} ${2: += some};
$1 %= ${3:MOD};
endsnippet
snippet range "range" i
${1:S}[${2:i} + ${3:M}] - $1[$2]
endsnippet
snippet nc2 "nc2" i
${1:(long long)} ${2:val} * ($2 - 1) / 2;
endsnippet
snippet ceil "ceil" i
(${1:A} + ${2:B} - 1) / $2
endsnippet
snippet ceil2 "ceil2" i
(${1:A} + 1) / 2
endsnippet
snippet sum_all "sum all" b
${1:long long} ${2:sum} = 0;
for (int ${3:i} = ${4:0}; $3 <${5:N}; $3++) {
	$2 += ${6:A}[i];
}
endsnippet
snippet gcd_all "gcd all" b
${1:long long} ${2:GCD} = ${3:A}[0];
for (int i = 1; i < ${4:N}; i++) {
	$2 = gcd($2, $3[i]);
}
endsnippet
snippet lcm_all "lcm all" b
${1:long long} ${2:LCM} = 1;
for (int i = 0; i < ${3:N}; i++) {
	$2 = lcm($2, ${4:A}[i]);
}
endsnippet
snippet ren_max "ren max" b
int ${1:ren_max} = 0; // 最大コンボ数
for (int ren = 0, ${2:i} = ${3:0}; $2 <${4:N}; $2++) {
	ren = ( ${5:condition} ? ren + 1 : 0);
	$1 = max($1, ren);
}
endsnippet
snippet pattern_4 "4" b
for (int ${1:k} = 0; $1 < 4; $1++) {
	if ($1 & 1) { // x o x o
	}
	if ($1 & 2) { // x x o o
	}
}
endsnippet

# wrap
snippet divceil "divceil" b
// 負もok
auto divCeil = []<class T>(T a, T b) -> T {
	return a / b + (((a ^ b) > 0 and a % b != 0) ? 1 : 0);
};
endsnippet
snippet divfloor "divfloor" b
// 負もok
auto divFloor = []<class T>(T a, T b) -> T {
	return a / b - (((a ^ b) < 0 and a % b != 0) ? 1 : 0);
};
endsnippet
snippet islower "is lower" b
// bool値を返すようwrap
auto islow = [](char c) -> bool { return islower(c) != 0; };
endsnippet
snippet isupper "is upper" b
// bool値を返すようwrap
auto isupp = [](char c) -> bool { return isupper(c) != 0; };
endsnippet

# =========================================================
# type
# =========================================================
snippet ll "long long" bi
long long 
endsnippet
snippet dou "double" bi
double 
endsnippet

snippet vec "vec" bi
vector<${1:int}>
endsnippet
snippet vec2 "vec2" bi
vector<vector<${1:int}>> ${2:G}(${3:N}, vector<$1>(${4:M}, ${5:0}));
endsnippet
snippet st "set" bi
set<${1:int}>
endsnippet
snippet mul "mul" bi
multiset<${1:int}>
endsnippet
snippet mp "map" bi
map<${1:int}, ${2:int}>
endsnippet
snippet uno "unordered_map" bi
unordered_map<${1:int}, ${2:int}>
endsnippet

snippet pp "pair" bi
pair<${1:int}, ${2:int}>
endsnippet
snippet tu "tuple" bi
tuple<${1}>
endsnippet
snippet get "get" bi
get<${1}>(${2})
endsnippet

snippet sta "stack" bi
stack<${1:int}>
endsnippet
snippet qu "queue" bi
queue<${1:int}>
endsnippet
snippet pri "priority_queue" bi
// emptyなとき$4になるようpadding
priority_queue<${1:int}> ${2:q};
for (int i = 0; i < ${3:N}; i++) $2.push(${4:0});
endsnippet
snippet pril "pril" bi
priority_queue<${1:int}, vector<$1>, greater<$1>>
endsnippet
snippet deq "deque" bi
deque<${1:char}>
endsnippet
