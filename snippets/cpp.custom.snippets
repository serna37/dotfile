#*cpp.custom.snippets*        Version 1.0
#==============================================================================
#CONTENTS                                                 *cpp.custom*
#
#    const ....................... |const|
#    define ...................... |def some var|
#    calculation ................. |calculation template|
#    input ....................... |std cin|
#    output ...................... |std cout|
#    debug ....................... |debug|
#
#==============================================================================

# =========================================================
# const
# =========================================================
snippet PI "PI" b
const double PI = acos(-1);
endsnippet
snippet INF "infinity int" b
constexpr int INF = 1e9;
endsnippet
snippet INF_ll "infinity long long" b
constexpr long long INF = 1e18;
endsnippet
snippet MOD_998244353 "mod" b
constexpr long long MOD = 998244353;
endsnippet
snippet MOD_100000007 "mod" b
constexpr long long MOD = 1000000007;
endsnippet
snippet EPS "eps" b
constexpr long double EPS = ${1:1e-14};
endsnippet
snippet MAX "MAX int" b
constexpr int MAX = ${1:2e6};
endsnippet
snippet GRID_dydx4 "grid connector" b
// 下右上左
// DRUL
const vector<int> dx = {0, 1, 0, -1};
const vector<int> dy = {1, 0, -1, 0};
endsnippet
snippet GRID_dydx8 "grid connector" b
const vector<int> dx = {0, 1, 0, -1, 1, -1, 1, -1};
const vector<int> dy = {1, 0, -1, 0, 1, 1, -1, -1};
endsnippet

# =========================================================
# define
# =========================================================
snippet a "ans" b
${1:int} ans = ${2:0};
endsnippet
snippet c "cnt" b
${1:int} cnt = ${2:0};
endsnippet
snippet t "tmp" b
${1:int} ${2:tmp} = ${3:0};
endsnippet
snippet ok "ok" b
bool ok = ${1:false};
endsnippet
snippet alma "alma" b
bool alma = true;
endsnippet
snippet anma "anma" b
bool anma = false;
endsnippet
snippet size "size" b
int ${1:N} = ${2:S}.size();
endsnippet
snippet size "size" i
(int)${1:S}.size()${2}
endsnippet
snippet minus_2 "minus" b
--${1:A}, --${2:B};
endsnippet
snippet saninf "ternary operator inf" i
( ${1:ans} == ${2:INF} ? ${3:-1} : $1 )
endsnippet

# =========================================================
# calculation
# =========================================================
snippet allmatch "allmatch" b
${1:alma} &= ${2};
endsnippet
snippet anymatch "anymatch" b
${1:anma} |= ${2};
endsnippet
snippet mod "mod" b
${1:ans} %= ${2:MOD};
endsnippet
snippet range "range" i
${1:S}[${2:i} + ${3:M}] - $1[$2]
endsnippet
snippet nc2 "nc2" i
${1:(long long)} ${2:val} * ($2 - 1) / 2
endsnippet
snippet tousa "tousa" i
${1:(long long)} (1 + ${2:n}) * $2 / 2
endsnippet
snippet ceil "ceil" i
(${1:A} + ${2:B} - 1) / $2
endsnippet
snippet ceil2 "ceil2" i
(${1:A} + 1) / 2
endsnippet
snippet odd "odd" i
${1:i} & 1
endsnippet
snippet even "even" i
${1:i} % 2 == 0
endsnippet
snippet sum_all "sum all" b
${1:long long} ${2:sum} = 0;
for (auto &&${3:v} : ${4:A}) $2 += $3;
endsnippet
snippet gcd_all "gcd all" b
${1:long long} ${2:GCD} = 0;
for (auto &&${3:v} : ${4:A}) $2 = gcd($2, $3);
endsnippet
snippet lcm_all "lcm all" b
${1:long long} ${2:LCM} = 1;
for (auto &&${3:v} : ${4:A}) $2 = lcm($2, $3);
endsnippet
snippet ren_max "ren max" b
// 条件を満たす、最大コンボ数
int ${1:ren_max} = 0;
for (int ren = 0, ${2:i} = ${3:0}; $2 <${4:N}; ++$2) {
	ren = ( ${5:condition} ? ren + 1 : 0);
	$1 = max($1, ren);
}
endsnippet
snippet pattern_4 "4" b
for (int ${1:k} = 0; $1 < 4; ++$1) {
	if ($1 & 1) { // x o x o
	}
	if ($1 & 2) { // x x o o
	}
}
endsnippet

# =========================================================
# input
# =========================================================
snippet in_1 "in 1" b
${1:int} ${2:N};
cin >> $2;
endsnippet
snippet in_1_vec "in 1 + vec" b
${1:int} ${2:N};
cin >> $2;
vector<${3:int}> ${4:A}(${5:$2});
for (int ${6:i} = ${7:0}; $6 <${8:$5}; ++$6) {
	cin >> $4[$6];
}
endsnippet
snippet in_1_q "in 1 + q" b
${1:int} ${2:Q};
cin >> $2;
while ($2--) {
	${3}
}
endsnippet
snippet in_2 "in 2" b
${1:int} ${2:N}, ${3:M};
cin >> $2 >> $3;
endsnippet
snippet in_3 "in 3" b
${1:int} ${2:N}, ${3:M}, ${4:K};
cin >> $2 >> $3 >> $4;
endsnippet
snippet in_4 "in 4" b
${1:int} ${2:N}, ${3:M}, ${4:K}, ${5:S};
cin >> $2 >> $3 >> $4 >> $5;
endsnippet
snippet vec_in_1 "vec in 1" b
vector<${1:int}> ${2:A}(${3:N});
for (int ${4:i} = ${5:0}; $4 <${6:$3}; ++$4) {
	cin >> $2[$4];
}
endsnippet
snippet vec_in_2 "vec in 2" b
vector<${1:int}> ${2:A}(${4:N}), ${3:B}($4);
for (int ${5:i} = ${6:0}; $5 <${7:$4}; ++$5) {
	cin >> $2[$5] >> $3[$5];
}
endsnippet
snippet vec_in_3 "vec in 3" b
vector<${1:int}> ${2:A}(${5:N}), ${3:B}($5), ${4:C}($5);
for (int ${6:i} = ${7:0}; $6 <${8:$5}; ++$6) {
	cin >> $2[$6] >> $3[$6] >> $4[$6];
}
endsnippet
snippet vec_in_4 "vec in 4" b
vector<${1:int}> ${2:A}(${6:N}), ${3:B}($6), ${4:C}($6), ${5:D}($6);
for (int ${7:i} = ${8:0}; $7 <${9:$6}; ++$7) {
	cin >> $2[$7] >> $3[$7] >> $4[$7] >> $5[$7];
}
endsnippet
snippet vec_in_resize "vec in resize" b
vector<vector<${1:int}>> ${2:A}(${3:N});
for (int ${4:i} = ${5:0}; $4 <${6:$3}; ++$4) {
	${7:int} ${8:a};
	cin >> $8;
	$2[$4].resize($8);
	for (int ${9:j} = 0; $9 < $8; ++$9) {
		cin >> $2[$4][$9];
	}
}
endsnippet
snippet grid_in "grid in" b
vector<vector<${1:char}>> ${2:G}(${3:H}, vector<$1>(${4:W}));
for (int i = 0; i < $3; ++i) {
	for (int j = 0; j < $4; ++j) {
		cin >> $2[i][j];
	}
}
endsnippet
snippet graph_in "graph in" b
vector<vector<${1:int}>> ${2:G}(${3:N});
for (int i = 0; i < ${4:M}; ++i) {
	$1 ${5:A}, ${6:B};
	cin >> $5 >> $6;
	--$5, --$6;
	$2[$5].push_back($6);
	$2[$6].push_back($5);
}
endsnippet
snippet graph_cost_in "graph cost in" b
Graph<${1:long long}> ${2:G}(${3:N});
for (int i = 0; i < ${4:M}; ++i) {
	// 頂点
	int from, to;
	cin >> from >> to;
	--from, --to;
	// コスト
	$1 cost;
	cin >> cost;
	// コストなしの時
	$2.add(from, to);
	$2.add(to, from);
	// コストあり
	$2.add(from, to, cost, i);
	$2.add(to, from, cost, i);
}
endsnippet
snippet edges_cin "edges in" b
Graph<${1:long long}> ${2:G}(${3:N});
vector<Edge<$1>> ${4:E};
for (int i = 0; i < ${5:M}; ++i) {
	// 頂点
	int from, to;
	cin >> from >> to;
	--from, --to;
	// コスト
	$1 cost;
	cin >> cost;
	// コストありグラフ
	$2.add(from, to, cost, i);
	$2.add(to, from, cost, i);
	// 辺
	$4.push_back({from, to, cost, i});
}
endsnippet

# =========================================================
# output
# =========================================================
snippet cout "cout" b
cout << ${1:ans} << endl;
endsnippet
snippet cout_san "cout ternary operator yes no" b
cout << (${1:condition} ? "${2:Yes}" : "${3:No}") << endl;
endsnippet
snippet cout_vec "cout vector" b
for (int ${1:i} = 0; $1 < ${2:N}; ++$1) {
	if ($1) cout << " ";
	cout << ${3:A}[$1];
}
cout << endl;
endsnippet
snippet cout_all "cout all" b
int ${1:_i} = 0;
for (auto &&v : ${2:st}) {
	if ($1++) cout << " ";
	cout << v;
}
cout << endl;
endsnippet
snippet cout_grid "cout grid" b
for (int ${1:i} = 0; $1 < ${2:N}; ++$1) {
	for (int ${3:j} = 0; $3 < ${4:M}; ++$3) {
		if ($3) cout << " ";
		cout << ${5:G}[$1][$3];
	}
	cout << endl;
}
endsnippet
snippet cout_map "cout map" b
for (auto &&[k, v] : ${1:mp}) cout << "[" << k << "," << v << "] ";
cout << endl;
endsnippet
snippet cout_endl "endl" b
cout << endl;
endsnippet
snippet cout_fixed_setprecision "fixed setprecision" b
cout << fixed << setprecision(${1:20});
endsnippet

# =========================================================
# debug
# =========================================================
snippet debug "debug" b
debug(${1});
endsnippet
snippet template_debug "debug" b
#include <bits/stdc++.h>
using namespace std;
// --- debug_start
// ==========================================================================
// ==========================================================================
template <typename A, typename B> string to_string(pair<A, B> p);
template <typename A, typename B, typename C>
string to_string(tuple<A, B, C> p);
template <typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p);
string to_string(const string &s) {
	return '"' + s + '"';
}
string to_string(const char *s) {
	return to_string((string)s);
}
string to_string(bool b) {
	return (b ? "true" : "false");
}
string to_string(vector<bool> v) {
	bool first = true;
	string res = "{";
	for (int i = 0; i < static_cast<int>(v.size()); i++) {
		if (!first) res += ", ";
		first = false;
		res += to_string(v[i]);
	}
	res += "}";
	return res;
}
template <size_t N> string to_string(bitset<N> v) {
	string res = "";
	for (size_t i = 0; i < N; i++) res += static_cast<char>('0' + v[i]);
	return res;
}
template <typename A> string to_string(A v) {
	bool first = true;
	string res = "{";
	for (const auto &x : v) {
		if (!first) res += ", ";
		first = false;
		res += to_string(x);
	}
	res += "}";
	return res;
}
template <typename A, typename B> string to_string(pair<A, B> p) {
	return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}
template <typename A, typename B, typename C>
string to_string(tuple<A, B, C> p) {
	return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " +
					to_string(get<2>(p)) + ")";
}
template <typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p) {
	return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " +
					to_string(get<2>(p)) + ", " + to_string(get<3>(p)) + ")";
}
void debug_out() {
	cerr << endl;
}
template <typename Head, typename... Tail> void debug_out(Head H, Tail... T) {
	cerr << " " << to_string(H);
	debug_out(T...);
}
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
// --- debug_end
// ==========================================================================
// ==========================================================================

${1:定数・ライブラリ}
int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	// ===============
	// 小数setprecision
	// MOD
	// long long
	// 困ったらalgo
	// ===============
	${2}
} // 計上パート ans宣言
endsnippet

